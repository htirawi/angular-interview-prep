// Enhanced Interactive Quiz Questions
// Generated by qguard - Question Guard Tool
// This file contains all quiz questions for the interactive quiz system

import type { InteractiveQuizQuestion } from "../types/interactive-quiz.js";

export const ANGULAR_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "angular-junior-1",
      question: "What is Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A complete platform for building web applications",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
      ],
      explanation: "Angular is a complete platform for building web applications",
      category: "Angular Basics",
      difficulty: "easy",
      tags: ["basics", "platform"],
      points: 1,
    },
    {
      id: "angular-junior-2",
      question: "Complete the following: Angular uses _____ for two-way data binding.",
      type: "fill-blank",
      correctAnswer: "ngModel",
      explanation: "Angular uses ngModel directive for two-way data binding",
      category: "Data Binding",
      difficulty: "easy",
      tags: ["data-binding", "ngModel"],
      points: 1,
    },
    {
      id: "angular-junior-3",
      question:
        "Which Angular features help with performance optimization? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "OnPush change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Lazy loading",
          isCorrect: true,
        },
        {
          id: "c",
          text: "TrackBy function",
          isCorrect: true,
        },
        {
          id: "d",
          text: "All of the above",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "OnPush change detection",
      category: "Performance",
      difficulty: "easy",
      tags: ["performance", "optimization"],
      points: 1,
    },
    {
      id: "angular-junior-4",
      question: "Angular guards are used to control route access.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular guards are used to control access to routes",
      category: "Routing",
      difficulty: "easy",
      tags: ["guards", "routing", "security"],
      points: 1,
    },
    {
      id: "angular-junior-5",
      question: "What is the difference between Angular services and components?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Services handle UI, components handle business logic",
          isCorrect: false,
        },
        {
          id: "c",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Services are deprecated in Angular",
          isCorrect: false,
        },
      ],
      explanation: "Components handle the UI and user interactions",
      category: "Architecture",
      difficulty: "easy",
      tags: ["components", "services", "architecture"],
      points: 1,
    },
    {
      id: "angular-junior-6",
      question: "Complete: Angular uses ____ for reactive programming.",
      type: "fill-blank",
      correctAnswer: "RxJS",
      explanation:
        "Angular uses RxJS (Reactive Extensions for JavaScript) for reactive programming and handling asynchronous operations.",
      category: "Reactive Programming",
      difficulty: "easy",
      tags: ["rxjs", "reactive", "observables"],
      points: 1,
    },
    {
      id: "angular-junior-7",
      question: "What is dependency injection in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A way to inject CSS into components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A method for database connections",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A deprecated feature",
          isCorrect: false,
        },
      ],
      explanation:
        "Dependency injection is a design pattern where dependencies are provided to a class rather than the class creating them itself.",
      category: "Dependency Injection",
      difficulty: "easy",
      tags: ["dependency-injection", "design-pattern"],
      points: 1,
    },
    {
      id: "angular-junior-8",
      question: "Angular CLI is used for project scaffolding and development tasks.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular CLI (Command Line Interface) is used for creating projects",
      category: "Angular CLI",
      difficulty: "easy",
      tags: ["cli", "tooling", "scaffolding"],
      points: 1,
    },
    {
      id: "angular-junior-9",
      question: "Which decorators are commonly used in Angular? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "@Component",
          isCorrect: true,
        },
        {
          id: "b",
          text: "@Injectable",
          isCorrect: true,
        },
        {
          id: "c",
          text: "@Input",
          isCorrect: true,
        },
        {
          id: "d",
          text: "@Output",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular uses decorators like @Component",
      category: "Decorators",
      difficulty: "easy",
      tags: ["decorators", "metadata"],
      points: 1,
    },
    {
      id: "angular-junior-10",
      question: "Complete: Angular applications are built using ____ architecture.",
      type: "fill-blank",
      correctAnswer: "component-based",
      explanation:
        "Angular applications follow a component-based architecture where the application is built as a tree of components.",
      category: "Architecture",
      difficulty: "easy",
      tags: ["architecture", "components"],
      points: 1,
    },
    {
      id: "angular-junior-11",
      question: "What is the purpose of Angular modules?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To create CSS styles",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage database connections",
          isCorrect: false,
        },
      ],
      explanation: "Angular modules are used to organize related components",
      category: "Modules",
      difficulty: "easy",
      tags: ["modules", "organization"],
      points: 1,
    },
    {
      id: "angular-junior-12",
      question: "Angular supports both template-driven and reactive forms.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular provides both template-driven forms (declarative) and reactive forms (programmatic) for handling user input.",
      category: "Forms",
      difficulty: "easy",
      tags: ["forms", "validation"],
      points: 1,
    },
    {
      id: "angular-junior-13",
      question: "What is the purpose of Angular pipes?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To transform data in templates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create HTTP connections",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component lifecycle",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Angular pipes are used to transform data in templates",
      category: "Pipes",
      difficulty: "easy",
      tags: ["pipes", "data-transformation"],
      points: 1,
    },
    {
      id: "angular-junior-14",
      question: "Complete: Angular uses ____ for styling components.",
      type: "fill-blank",
      correctAnswer: "CSS",
      explanation: "Angular components can be styled using CSS",
      category: "Styling",
      difficulty: "easy",
      tags: ["css", "styling"],
      points: 1,
    },
    {
      id: "angular-junior-15",
      question:
        "Which lifecycle hooks are available in Angular components? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "ngOnInit",
          isCorrect: true,
        },
        {
          id: "b",
          text: "ngOnDestroy",
          isCorrect: true,
        },
        {
          id: "c",
          text: "ngOnChanges",
          isCorrect: true,
        },
        {
          id: "d",
          text: "ngAfterViewInit",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular provides several lifecycle hooks including ngOnInit",
      category: "Lifecycle",
      difficulty: "easy",
      tags: ["lifecycle", "hooks"],
      points: 1,
    },
    {
      id: "angular-junior-16",
      question: "Angular applications are single-page applications (SPAs).",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular applications are typically single-page applications that load once and dynamically update content.",
      category: "SPA",
      difficulty: "easy",
      tags: ["spa", "architecture"],
      points: 1,
    },
    {
      id: "angular-junior-17",
      question: "What is the purpose of Angular directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To extend HTML with custom behavior",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create database tables",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage component state",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular directives are used to extend HTML with custom behavior and functionality.",
      category: "Directives",
      difficulty: "easy",
      tags: ["directives", "html"],
      points: 1,
    },
    {
      id: "angular-junior-18",
      question: "Complete: Angular uses ____ for HTTP requests.",
      type: "fill-blank",
      correctAnswer: "HttpClient",
      explanation: "Angular provides HttpClient service for making HTTP requests to external APIs.",
      category: "HTTP",
      difficulty: "easy",
      tags: ["http", "api"],
      points: 1,
    },
    {
      id: "angular-junior-19",
      question: "Which built-in directives does Angular provide? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "*ngIf",
          isCorrect: true,
        },
        {
          id: "b",
          text: "*ngFor",
          isCorrect: true,
        },
        {
          id: "c",
          text: "*ngSwitch",
          isCorrect: true,
        },
        {
          id: "d",
          text: "*ngStyle",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation:
        "Angular provides several built-in structural and attribute directives like *ngIf",
      category: "Directives",
      difficulty: "easy",
      tags: ["directives", "built-in"],
      points: 1,
    },
    {
      id: "angular-junior-20",
      question: "Angular supports TypeScript by default.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular is built with TypeScript and provides excellent TypeScript support out of the box.",
      category: "TypeScript",
      difficulty: "easy",
      tags: ["typescript", "language"],
      points: 1,
    },
    {
      id: "angular-junior-21",
      question: "What is the purpose of Angular interceptors?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept and modify HTTP requests/responses",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular interceptors are used to intercept and modify HTTP requests and responses globally.",
      category: "Interceptors",
      difficulty: "easy",
      tags: ["interceptors", "http"],
      points: 1,
    },
    {
      id: "angular-junior-22",
      question: "Complete: Angular uses ____ for animations.",
      type: "fill-blank",
      correctAnswer: "Angular Animations",
      explanation:
        "Angular provides a powerful animations API for creating smooth transitions and animations.",
      category: "Animations",
      difficulty: "easy",
      tags: ["animations", "transitions"],
      points: 1,
    },
    {
      id: "angular-junior-23",
      question: "Which testing frameworks does Angular support? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Jasmine",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Karma",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Protractor",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Jest",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular supports various testing frameworks including Jasmine",
      category: "Testing",
      difficulty: "easy",
      tags: ["testing", "frameworks"],
      points: 1,
    },
    {
      id: "angular-junior-24",
      question: "Angular applications can be deployed to various platforms.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular applications can be deployed to web servers",
      category: "Deployment",
      difficulty: "easy",
      tags: ["deployment", "platforms"],
      points: 1,
    },
    {
      id: "angular-junior-25",
      question: "What is the purpose of Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To generate and modify code",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular schematics are code generation tools that help create and modify Angular projects.",
      category: "Schematics",
      difficulty: "easy",
      tags: ["schematics", "code-generation"],
      points: 1,
    },
    {
      id: "angular-junior-26",
      question: "Complete: Angular uses ____ for internationalization.",
      type: "fill-blank",
      correctAnswer: "i18n",
      explanation:
        "Angular provides i18n (internationalization) support for creating multi-language applications.",
      category: "i18n",
      difficulty: "easy",
      tags: ["i18n", "internationalization"],
      points: 1,
    },
    {
      id: "angular-junior-27",
      question: "Which Angular features help with SEO? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Server-side rendering",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Angular Universal",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Meta tags",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Static generation",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular provides several features for SEO including server-side rendering",
      category: "SEO",
      difficulty: "easy",
      tags: ["seo", "ssr", "universal"],
      points: 1,
    },
    {
      id: "angular-junior-28",
      question: "Angular supports progressive web app (PWA) features.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular provides built-in support for creating progressive web apps with service workers and offline capabilities.",
      category: "PWA",
      difficulty: "easy",
      tags: ["pwa", "offline"],
      points: 1,
    },
    {
      id: "angular-junior-29",
      question: "What is the purpose of Angular elements?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reusable web components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular elements allow you to create reusable web components that can be used in any web application.",
      category: "Elements",
      difficulty: "easy",
      tags: ["elements", "web-components"],
      points: 1,
    },
    {
      id: "angular-junior-30",
      question: "Complete: Angular uses ____ for state management.",
      type: "fill-blank",
      correctAnswer: "services",
      explanation: "Angular uses services for state management",
      category: "State Management",
      difficulty: "easy",
      tags: ["state", "services"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "angular-intermediate-1",
      question: "How do you implement lazy loading in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using loadChildren in routing configuration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using ngOnInit hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using @Injectable decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using *ngIf directive",
          isCorrect: false,
        },
      ],
      explanation:
        "Lazy loading is implemented using loadChildren in the routing configuration to load modules on demand.",
      category: "Performance",
      difficulty: "medium",
      tags: ["lazy-loading", "routing", "performance"],
      points: 2,
    },
    {
      id: "angular-intermediate-2",
      question: "What is the difference between Angular services and components?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To manage state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To style components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components handle UI, services handle business logic",
          isCorrect: true,
        },
      ],
      explanation:
        "Components handle the UI and user interactions, while services handle business logic and data management.",
      category: "Architecture",
      difficulty: "medium",
      tags: ["components", "services", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-3",
      question: "What is the difference between Angular pipes and directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Pipes transform data, directives modify DOM",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Pipes modify DOM, directives transform data",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Both only transform data",
          isCorrect: false,
        },
      ],
      explanation:
        "Pipes are used to transform data in templates, while directives are used to modify the DOM structure and behavior.",
      category: "Directives & Pipes",
      difficulty: "medium",
      tags: ["pipes", "directives", "dom"],
      points: 2,
    },
    {
      id: "angular-intermediate-4",
      question: "How do you handle HTTP errors in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using catchError operator with RxJS",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using try-catch blocks",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using error boundaries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using global error handlers only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular uses RxJS operators like catchError to handle HTTP errors in a reactive way.",
      category: "HTTP",
      difficulty: "medium",
      tags: ["http", "error-handling", "rxjs"],
      points: 2,
    },
    {
      id: "angular-intermediate-5",
      question: "What is the purpose of Angular interceptors?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept and modify HTTP requests/responses",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Interceptors are used to intercept and modify HTTP requests and responses globally.",
      category: "HTTP",
      difficulty: "medium",
      tags: ["interceptors", "http", "middleware"],
      points: 2,
    },
    {
      id: "angular-intermediate-6",
      question: "How do you implement custom validators in Angular forms?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating functions that return ValidatorFn",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending FormControl",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using built-in validators only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying the form directly",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom validators are functions that return a ValidatorFn, which is used to validate form controls.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "validation", "custom-validators"],
      points: 2,
    },
    {
      id: "angular-intermediate-7",
      question: "What is the difference between Angular services and providers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Services are classes, providers are configuration objects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Services are providers, providers are services",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Services are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Services are classes that contain business logic, while providers are configuration objects that tell Angular how to create and inject services.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["services", "providers", "dependency-injection"],
      points: 2,
    },
    {
      id: "angular-intermediate-8",
      question: "How do you implement route guards in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing CanActivate, CanDeactivate, etc. interfaces",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By using middleware",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By modifying routes directly",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By using interceptors",
          isCorrect: false,
        },
      ],
      explanation:
        "Route guards are implemented by creating classes that implement interfaces like CanActivate, CanDeactivate, etc.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "guards", "security"],
      points: 2,
    },
    {
      id: "angular-intermediate-9",
      question: "What is the purpose of Angular resolvers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To pre-fetch data before route activation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle form validation",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
      ],
      explanation:
        "Resolvers are used to pre-fetch data before a route is activated, ensuring data is available when the component loads.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "resolvers", "data-fetching"],
      points: 2,
    },
    {
      id: "angular-intermediate-10",
      question: "How do you implement state management in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using services with RxJS subjects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only component state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using Redux only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using localStorage only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular state management is typically implemented using services with RxJS subjects like BehaviorSubject or ReplaySubject.",
      category: "State Management",
      difficulty: "medium",
      tags: ["state-management", "rxjs", "services"],
      points: 2,
    },
    {
      id: "angular-intermediate-11",
      question: "How do you optimize Angular application performance?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using OnPush change detection, lazy loading, and trackBy functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only OnPush change detection",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only trackBy functions",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular performance optimization involves multiple strategies including OnPush change detection, lazy loading, trackBy functions, and proper memory management.",
      category: "Performance",
      difficulty: "medium",
      tags: ["performance", "optimization", "change-detection"],
      points: 2,
    },
    {
      id: "angular-intermediate-12",
      question: "What is the difference between Angular reactive forms and template-driven forms?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Reactive forms are programmatic, template-driven forms are declarative",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Reactive forms are declarative, template-driven forms are programmatic",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Template-driven forms are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Reactive forms are programmatic and provide more control, while template-driven forms are declarative and easier to set up.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "reactive", "template-driven"],
      points: 2,
    },
    {
      id: "angular-intermediate-13",
      question: "How do you implement custom pipes in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a class that implements PipeTransform interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Pipe class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Pipe decorator only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in pipes",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom pipes are created by implementing the PipeTransform interface and using the @Pipe decorator.",
      category: "Pipes",
      difficulty: "medium",
      tags: ["pipes", "custom", "transformation"],
      points: 2,
    },
    {
      id: "angular-intermediate-14",
      question: "What is the purpose of Angular modules?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To organize and group related functionality",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular modules are used to organize and group related functionality, components, services, and other features.",
      category: "Modules",
      difficulty: "medium",
      tags: ["modules", "organization", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-15",
      question: "How do you handle authentication in Angular applications?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using route guards, interceptors, and JWT tokens",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only route guards",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only JWT tokens",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular authentication typically involves route guards for protecting routes, interceptors for adding tokens to requests, and JWT tokens for secure communication.",
      category: "Security",
      difficulty: "medium",
      tags: ["authentication", "security", "guards"],
      points: 2,
    },
    {
      id: "angular-intermediate-16",
      question: "What is the difference between Angular services and factories?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Services are singletons, factories can return different instances",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Factories are singletons, services can return different instances",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Factories are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Services are typically singletons, while factories can return different instances based on configuration or parameters.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["services", "factories", "dependency-injection"],
      points: 2,
    },
    {
      id: "angular-intermediate-17",
      question: "How do you implement internationalization (i18n) in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular i18n with translation files and locale IDs",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only translation files",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only locale IDs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using third-party libraries only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular i18n uses translation files, locale IDs, and the built-in i18n tools to support multiple languages.",
      category: "Internationalization",
      difficulty: "medium",
      tags: ["i18n", "internationalization", "localization"],
      points: 2,
    },
    {
      id: "angular-intermediate-18",
      question: "What is the purpose of Angular animations?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create smooth transitions and enhance user experience",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular animations are used to create smooth transitions, state changes, and enhance the overall user experience.",
      category: "Animations",
      difficulty: "medium",
      tags: ["animations", "transitions", "ux"],
      points: 2,
    },
    {
      id: "angular-intermediate-19",
      question: "How do you implement server-side rendering (SSR) in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular Universal",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using Angular CLI only",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using third-party libraries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "SSR is not supported in Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular Universal is the official solution for implementing server-side rendering in Angular applications.",
      category: "SSR",
      difficulty: "medium",
      tags: ["ssr", "universal", "server-side"],
      points: 2,
    },
    {
      id: "angular-intermediate-20",
      question: "What is the purpose of Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To generate and modify code automatically",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular schematics are code generation tools that help create and modify Angular projects, components, and other code automatically.",
      category: "Tooling",
      difficulty: "medium",
      tags: ["schematics", "code-generation", "tooling"],
      points: 2,
    },
    {
      id: "angular-intermediate-21",
      question: "How do you implement custom directives in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a class with @Directive decorator",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Directive class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Component decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in directives",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom directives are created by defining a class and using the @Directive decorator to specify the selector and behavior.",
      category: "Directives",
      difficulty: "medium",
      tags: ["directives", "custom", "dom-manipulation"],
      points: 2,
    },
    {
      id: "angular-intermediate-22",
      question: "What is the difference between Angular components and directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Components have templates, directives modify existing elements",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Directives have templates, components modify existing elements",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Components are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Components have their own templates and create new elements, while directives modify the behavior of existing DOM elements.",
      category: "Architecture",
      difficulty: "medium",
      tags: ["components", "directives", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-23",
      question: "How do you implement error handling in Angular applications?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using global error handlers, HTTP interceptors, and try-catch blocks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only global error handlers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only HTTP interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only try-catch blocks",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular error handling involves multiple layers including global error handlers, HTTP interceptors, and proper try-catch blocks.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["error-handling", "interceptors", "global-handlers"],
      points: 2,
    },
    {
      id: "angular-intermediate-24",
      question: "What is the purpose of Angular testing utilities?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To test components, services, and applications",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular testing utilities provide tools for testing components, services, and entire applications with Jasmine and Karma.",
      category: "Testing",
      difficulty: "medium",
      tags: ["testing", "jasmine", "karma"],
      points: 2,
    },
    {
      id: "angular-intermediate-25",
      question: "How do you implement progressive web app (PWA) features in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular service workers and PWA schematics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only service workers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only PWA schematics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "PWA features are not supported in Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular PWA features are implemented using service workers and the PWA schematics to enable offline functionality and app-like experience.",
      category: "PWA",
      difficulty: "medium",
      tags: ["pwa", "service-workers", "offline"],
      points: 2,
    },
    {
      id: "angular-intermediate-26",
      question: "What is the difference between Angular observables and promises?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Observables can emit multiple values, promises resolve once",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Promises can emit multiple values, observables resolve once",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Promises are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Observables can emit multiple values over time and can be cancelled, while promises resolve with a single value and cannot be cancelled.",
      category: "RxJS",
      difficulty: "medium",
      tags: ["rxjs", "observables", "promises"],
      points: 2,
    },
    {
      id: "angular-intermediate-27",
      question: "How do you implement custom form controls in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing ControlValueAccessor interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending FormControl",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Component decorator only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in form controls",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom form controls are created by implementing the ControlValueAccessor interface to integrate with Angular's reactive forms.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "custom-controls", "control-value-accessor"],
      points: 2,
    },
    {
      id: "angular-intermediate-28",
      question: "What is the purpose of Angular dependency injection tokens?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To provide type-safe dependency injection for non-class dependencies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Dependency injection tokens are used to provide type-safe injection for non-class dependencies like strings, functions, or objects.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["dependency-injection", "tokens", "type-safety"],
      points: 2,
    },
    {
      id: "angular-intermediate-29",
      question: "How do you implement custom decorators in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating functions that return decorator functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Decorator class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Decorator decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in decorators",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom decorators are created by defining functions that return decorator functions, which can modify classes, methods, or properties.",
      category: "Decorators",
      difficulty: "medium",
      tags: ["decorators", "custom", "metadata"],
      points: 2,
    },
    {
      id: "angular-intermediate-30",
      question: "What is the purpose of Angular zone.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To track asynchronous operations and trigger change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Zone.js is used by Angular to track asynchronous operations and automatically trigger change detection when needed.",
      category: "Change Detection",
      difficulty: "medium",
      tags: ["zone.js", "change-detection", "async"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "angular-senior-1",
      question: "How would you implement a custom change detection strategy in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing ChangeDetectionStrategy interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending Component class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using @Injectable decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying Angular core",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom change detection strategies are implemented by creating classes that implement the ChangeDetectionStrategy interface.",
      category: "Advanced",
      difficulty: "hard",
      tags: ["change-detection", "performance", "advanced"],
      points: 3,
    },
    {
      id: "angular-senior-2",
      question: "How would you implement a micro-frontend architecture with Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Module Federation, single-spa, or Angular Elements",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Angular CLI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Angular Modules",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Micro-frontends are not possible with Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Micro-frontend architecture in Angular can be implemented using Module Federation, single-spa framework, or Angular Elements for web components.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["micro-frontends", "architecture", "module-federation"],
      points: 3,
    },
    {
      id: "angular-senior-3",
      question: "How would you optimize Angular application bundle size?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using tree-shaking, lazy loading, and bundle analysis",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only tree-shaking",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only bundle analysis",
          isCorrect: false,
        },
      ],
      explanation:
        "Bundle size optimization involves tree-shaking unused code, lazy loading modules, and using bundle analysis tools to identify optimization opportunities.",
      category: "Performance",
      difficulty: "hard",
      tags: ["bundle-optimization", "tree-shaking", "lazy-loading"],
      points: 3,
    },
    {
      id: "angular-senior-4",
      question: "How would you implement advanced state management patterns in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using NgRx, Akita, or custom RxJS patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only services",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only localStorage",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced state management in Angular can be implemented using NgRx for Redux patterns, Akita for simpler state management, or custom RxJS patterns.",
      category: "State Management",
      difficulty: "hard",
      tags: ["state-management", "ngrx", "akita", "rxjs"],
      points: 3,
    },
    {
      id: "angular-senior-5",
      question: "How would you implement custom Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a library with custom rules and templates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By modifying Angular CLI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using only built-in schematics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Custom schematics are not supported",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom Angular schematics are created by building a library that defines custom rules and templates for code generation.",
      category: "Tooling",
      difficulty: "hard",
      tags: ["schematics", "code-generation", "custom-tools"],
      points: 3,
    },
    {
      id: "angular-senior-6",
      question: "How would you implement advanced Angular testing strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using TestBed, mocking, and integration testing patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unit tests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only integration tests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only e2e tests",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular testing involves using TestBed for component testing, proper mocking strategies, and integration testing patterns.",
      category: "Testing",
      difficulty: "hard",
      tags: ["testing", "testbed", "mocking", "integration"],
      points: 3,
    },
    {
      id: "angular-senior-7",
      question: "How would you implement advanced Angular security measures?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using CSP, XSS protection, and secure authentication patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only CSP",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only XSS protection",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only authentication",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular security involves Content Security Policy (CSP), XSS protection, secure authentication patterns, and input sanitization.",
      category: "Security",
      difficulty: "hard",
      tags: ["security", "csp", "xss", "authentication"],
      points: 3,
    },
    {
      id: "angular-senior-8",
      question: "How would you implement advanced Angular performance monitoring?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular DevTools, performance APIs, and custom metrics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Angular DevTools",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only performance APIs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only custom metrics",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced performance monitoring in Angular involves using Angular DevTools, Performance APIs, and custom metrics to track application performance.",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "monitoring", "devtools", "metrics"],
      points: 3,
    },
    {
      id: "angular-senior-9",
      question: "How would you implement advanced Angular deployment strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using CI/CD pipelines, environment configurations, and deployment automation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only manual deployment",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CI/CD pipelines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only environment configurations",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced deployment strategies involve CI/CD pipelines, environment-specific configurations, and automated deployment processes.",
      category: "Deployment",
      difficulty: "hard",
      tags: ["deployment", "ci-cd", "automation", "environments"],
      points: 3,
    },
    {
      id: "angular-senior-10",
      question: "How would you implement advanced Angular accessibility features?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using ARIA attributes, keyboard navigation, and screen reader support",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only ARIA attributes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only keyboard navigation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only screen reader support",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced accessibility in Angular involves proper ARIA attributes, keyboard navigation support, and screen reader compatibility.",
      category: "Accessibility",
      difficulty: "hard",
      tags: ["accessibility", "aria", "keyboard", "screen-readers"],
      points: 3,
    },
    {
      id: "angular-senior-11",
      question: "How would you implement advanced Angular error handling and logging?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using global error handlers, structured logging, and error tracking services",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only global error handlers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only structured logging",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only error tracking services",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced error handling involves global error handlers, structured logging systems, and integration with error tracking services like Sentry.",
      category: "Error Handling",
      difficulty: "hard",
      tags: ["error-handling", "logging", "monitoring", "tracking"],
      points: 3,
    },
    {
      id: "angular-senior-12",
      question: "How would you implement advanced Angular internationalization?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using dynamic locale loading, pluralization, and advanced translation features",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only static translations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only dynamic locale loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only pluralization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced i18n in Angular involves dynamic locale loading, pluralization rules, and advanced translation features for complex applications.",
      category: "Internationalization",
      difficulty: "hard",
      tags: ["i18n", "dynamic-loading", "pluralization", "translations"],
      points: 3,
    },
    {
      id: "angular-senior-13",
      question: "How would you implement advanced Angular animation techniques?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using complex state transitions, keyframe animations, and animation callbacks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only simple transitions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only keyframe animations",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only animation callbacks",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular animations involve complex state transitions, keyframe animations, and animation callbacks for sophisticated user experiences.",
      category: "Animations",
      difficulty: "hard",
      tags: ["animations", "transitions", "keyframes", "callbacks"],
      points: 3,
    },
    {
      id: "angular-senior-14",
      question: "How would you implement advanced Angular form validation patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using async validators, cross-field validation, and custom validation strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only sync validators",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only async validators",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only cross-field validation",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced form validation involves async validators, cross-field validation, and custom validation strategies for complex form scenarios.",
      category: "Forms",
      difficulty: "hard",
      tags: ["forms", "validation", "async", "cross-field"],
      points: 3,
    },
    {
      id: "angular-senior-15",
      question: "How would you implement advanced Angular routing patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using route resolvers, guards, and dynamic route configuration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only route resolvers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only guards",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced routing patterns involve route resolvers for data pre-loading, guards for route protection, and dynamic route configuration.",
      category: "Routing",
      difficulty: "hard",
      tags: ["routing", "resolvers", "guards", "dynamic"],
      points: 3,
    },
    {
      id: "angular-senior-16",
      question: "How would you implement advanced Angular HTTP patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using interceptors, retry logic, and advanced error handling",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic HTTP calls",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only retry logic",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced HTTP patterns involve interceptors for request/response handling, retry logic for failed requests, and sophisticated error handling.",
      category: "HTTP",
      difficulty: "hard",
      tags: ["http", "interceptors", "retry", "error-handling"],
      points: 3,
    },
    {
      id: "angular-senior-17",
      question: "How would you implement advanced Angular dependency injection patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using hierarchical injection, custom providers, and injection tokens",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic injection",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only hierarchical injection",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only custom providers",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced DI patterns involve hierarchical injection scopes, custom providers, and injection tokens for complex dependency scenarios.",
      category: "Dependency Injection",
      difficulty: "hard",
      tags: ["dependency-injection", "hierarchical", "providers", "tokens"],
      points: 3,
    },
    {
      id: "angular-senior-18",
      question: "How would you implement advanced Angular component communication patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using services, observables, and advanced event patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only @Input/@Output",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only services",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only observables",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced component communication involves services for shared state, observables for reactive communication, and sophisticated event patterns.",
      category: "Component Communication",
      difficulty: "hard",
      tags: ["communication", "services", "observables", "events"],
      points: 3,
    },
    {
      id: "angular-senior-19",
      question: "How would you implement advanced Angular lifecycle management?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using lifecycle hooks, cleanup patterns, and memory management",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic lifecycle hooks",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only cleanup patterns",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only memory management",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced lifecycle management involves proper use of lifecycle hooks, cleanup patterns, and memory management to prevent leaks.",
      category: "Lifecycle",
      difficulty: "hard",
      tags: ["lifecycle", "cleanup", "memory", "hooks"],
      points: 3,
    },
    {
      id: "angular-senior-20",
      question: "How would you implement advanced Angular testing patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using test doubles, integration testing, and advanced mocking strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unit tests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only test doubles",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only integration testing",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced testing patterns involve test doubles, comprehensive integration testing, and sophisticated mocking strategies for complex scenarios.",
      category: "Testing",
      difficulty: "hard",
      tags: ["testing", "test-doubles", "integration", "mocking"],
      points: 3,
    },
    {
      id: "angular-senior-21",
      question: "How would you implement advanced Angular performance optimization techniques?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using virtual scrolling, OnPush strategy, and advanced change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only virtual scrolling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only OnPush strategy",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic change detection",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced performance optimization involves virtual scrolling for large lists, OnPush change detection strategy, and sophisticated change detection patterns.",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "virtual-scrolling", "onpush", "change-detection"],
      points: 3,
    },
    {
      id: "angular-senior-22",
      question: "How would you implement advanced Angular security patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using sanitization, CSP headers, and secure coding practices",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic sanitization",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CSP headers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only secure coding",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced security patterns involve proper input sanitization, Content Security Policy headers, and secure coding practices to prevent vulnerabilities.",
      category: "Security",
      difficulty: "hard",
      tags: ["security", "sanitization", "csp", "secure-coding"],
      points: 3,
    },
    {
      id: "angular-senior-23",
      question: "How would you implement advanced Angular build optimization?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using webpack optimization, code splitting, and advanced bundling strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic webpack",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only code splitting",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic bundling",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced build optimization involves webpack configuration, intelligent code splitting, and sophisticated bundling strategies for optimal performance.",
      category: "Build Optimization",
      difficulty: "hard",
      tags: ["build", "webpack", "code-splitting", "bundling"],
      points: 3,
    },
    {
      id: "angular-senior-24",
      question: "How would you implement advanced Angular monitoring and analytics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using performance monitoring, user analytics, and error tracking",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only performance monitoring",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only user analytics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only error tracking",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced monitoring involves performance tracking, user behavior analytics, and comprehensive error tracking for production applications.",
      category: "Monitoring",
      difficulty: "hard",
      tags: ["monitoring", "analytics", "performance", "error-tracking"],
      points: 3,
    },
    {
      id: "angular-senior-25",
      question: "How would you implement advanced Angular deployment and DevOps practices?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using containerization, CI/CD pipelines, and infrastructure as code",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only containerization",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CI/CD pipelines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only infrastructure as code",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced DevOps practices involve containerization with Docker, sophisticated CI/CD pipelines, and infrastructure as code for scalable deployments.",
      category: "DevOps",
      difficulty: "hard",
      tags: ["devops", "containerization", "ci-cd", "infrastructure"],
      points: 3,
    },
    {
      id: "angular-senior-26",
      question: "How would you implement advanced Angular scalability patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using micro-frontends, lazy loading, and distributed architecture",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only micro-frontends",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only distributed architecture",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced scalability patterns involve micro-frontend architecture, intelligent lazy loading, and distributed system design for large-scale applications.",
      category: "Scalability",
      difficulty: "hard",
      tags: ["scalability", "micro-frontends", "lazy-loading", "distributed"],
      points: 3,
    },
    {
      id: "angular-senior-27",
      question: "How would you implement advanced Angular code organization patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using feature modules, barrel exports, and architectural patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only feature modules",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only barrel exports",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic modules",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced code organization involves feature modules, barrel exports for clean imports, and established architectural patterns like Clean Architecture.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["architecture", "feature-modules", "barrel-exports", "organization"],
      points: 3,
    },
    {
      id: "angular-senior-28",
      question: "How would you implement advanced Angular data flow patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using unidirectional data flow, state management, and reactive patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unidirectional data flow",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only state management",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only reactive patterns",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced data flow patterns involve unidirectional data flow, sophisticated state management, and reactive programming patterns for complex applications.",
      category: "Data Flow",
      difficulty: "hard",
      tags: ["data-flow", "state-management", "reactive", "unidirectional"],
      points: 3,
    },
    {
      id: "angular-senior-29",
      question: "How would you implement advanced Angular integration patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using API integration, third-party libraries, and service integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only API integration",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only third-party libraries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only service integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced integration patterns involve robust API integration, seamless third-party library integration, and sophisticated service integration patterns.",
      category: "Integration",
      difficulty: "hard",
      tags: ["integration", "api", "third-party", "services"],
      points: 3,
    },
    {
      id: "angular-senior-30",
      question: "How would you implement advanced Angular maintenance and evolution strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using versioning strategies, migration patterns, and legacy system integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only versioning strategies",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only migration patterns",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only legacy integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced maintenance strategies involve versioning strategies, migration patterns for framework updates, and integration with legacy systems.",
      category: "Maintenance",
      difficulty: "hard",
      tags: ["maintenance", "versioning", "migration", "legacy"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const REACT_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "react-junior-1",
      question: "What is React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library for building user interfaces",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A complete framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
      ],
      explanation: "React is a JavaScript library for building user interfaces",
      category: "React Basics",
      difficulty: "easy",
      tags: ["basics", "library"],
      points: 1,
    },
    {
      id: "react-junior-11",
      question: "What are React hooks?",
      type: "multiple-choice",
      explanation:
        "Hooks are functions that let you use state and lifecycle features in functional components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "functional"],
      points: 1,
    },
    {
      id: "react-junior-12",
      question: "Which hook is used to manage state in functional components?",
      type: "multiple-choice",
      explanation: "useState is the hook used to manage state in functional components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "state"],
      points: 1,
    },
    {
      id: "react-junior-13",
      question: "What is the purpose of useEffect?",
      type: "multiple-choice",
      explanation: "useEffect is used to perform side effects like data fetching",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "side-effects"],
      points: 1,
    },
    {
      id: "react-junior-14",
      question: "React components must return a single _____ element.",
      type: "fill-blank",
      correctAnswer: "JSX",
      explanation: "React components must return a single JSX element (or React Fragment).",
      category: "JSX",
      difficulty: "easy",
      tags: ["jsx", "return"],
      points: 1,
    },
    {
      id: "react-junior-15",
      question: "What is the difference between props and state?",
      type: "multiple-choice",
      explanation: "Props are read-only and passed from parent components",
      category: "Props vs State",
      difficulty: "easy",
      tags: ["props", "state", "differences"],
      points: 1,
    },
    {
      id: "react-junior-16",
      question: "What is the purpose of React.Fragment?",
      type: "multiple-choice",
      explanation:
        "React.Fragment allows you to group multiple elements without adding extra DOM nodes.",
      category: "Fragment",
      difficulty: "easy",
      tags: ["fragment", "dom"],
      points: 1,
    },
    {
      id: "react-junior-17",
      question: "Which method is called when a component is first rendered?",
      type: "multiple-choice",
      explanation: "componentDidMount is called after a component is rendered for the first time.",
      category: "Lifecycle",
      difficulty: "easy",
      tags: ["lifecycle", "mount"],
      points: 1,
    },
    {
      id: "react-junior-18",
      question: "What is the purpose of React Developer Tools?",
      type: "multiple-choice",
      explanation:
        "React Developer Tools is a browser extension for debugging and inspecting React components.",
      category: "Development Tools",
      difficulty: "easy",
      tags: ["devtools", "debugging"],
      points: 1,
    },
    {
      id: "react-junior-19",
      question: "React uses _____ to optimize rendering performance.",
      type: "fill-blank",
      correctAnswer: "Virtual DOM",
      explanation:
        "React uses the Virtual DOM to optimize rendering performance by minimizing DOM updates.",
      category: "Performance",
      difficulty: "easy",
      tags: ["virtual-dom", "performance"],
      points: 1,
    },
    {
      id: "react-junior-20",
      question: "What is the purpose of React Router?",
      type: "multiple-choice",
      explanation:
        "React Router is a library for handling navigation and routing in single-page applications.",
      category: "Routing",
      difficulty: "easy",
      tags: ["routing", "navigation"],
      points: 1,
    },
    {
      id: "react-junior-21",
      question: "What is the purpose of React Context?",
      type: "multiple-choice",
      explanation:
        "React Context allows you to share data between components without prop drilling.",
      category: "Context",
      difficulty: "easy",
      tags: ["context", "data-sharing"],
      points: 1,
    },
    {
      id: "react-junior-22",
      question: "What is the purpose of React.memo?",
      type: "multiple-choice",
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the result.",
      category: "Performance",
      difficulty: "easy",
      tags: ["memo", "performance"],
      points: 1,
    },
    {
      id: "react-junior-23",
      question: "What is the purpose of useCallback?",
      type: "multiple-choice",
      explanation:
        "useCallback is a hook that memoizes functions to prevent unnecessary re-renders of child components.",
      category: "Performance",
      difficulty: "easy",
      tags: ["callback", "performance"],
      points: 1,
    },
    {
      id: "react-junior-24",
      question: "What is the purpose of useMemo?",
      type: "multiple-choice",
      explanation:
        "useMemo is a hook that memoizes expensive calculations to avoid recalculating on every render.",
      category: "Performance",
      difficulty: "easy",
      tags: ["memo", "performance"],
      points: 1,
    },
    {
      id: "react-junior-25",
      question: "What is the purpose of React.StrictMode?",
      type: "multiple-choice",
      explanation:
        "React.StrictMode is a tool for highlighting potential problems in development mode.",
      category: "Development",
      difficulty: "easy",
      tags: ["strict-mode", "development"],
      points: 1,
    },
    {
      id: "react-junior-26",
      question: "What is the purpose of React.PureComponent?",
      type: "multiple-choice",
      explanation:
        "React.PureComponent automatically implements shouldComponentUpdate with a shallow prop and state comparison.",
      category: "Performance",
      difficulty: "easy",
      tags: ["pure-component", "performance"],
      points: 1,
    },
    {
      id: "react-junior-27",
      question: "What is the purpose of React.lazy?",
      type: "multiple-choice",
      explanation: "React.lazy allows you to lazy load components",
      category: "Performance",
      difficulty: "easy",
      tags: ["lazy", "performance"],
      points: 1,
    },
    {
      id: "react-junior-28",
      question: "What is the purpose of React.Suspense?",
      type: "multiple-choice",
      explanation: "React.Suspense allows you to handle loading states for lazy-loaded components.",
      category: "Performance",
      difficulty: "easy",
      tags: ["suspense", "loading"],
      points: 1,
    },
    {
      id: "react-junior-29",
      question: "What is the purpose of React.ErrorBoundary?",
      type: "multiple-choice",
      explanation:
        "Error boundaries catch JavaScript errors anywhere in the component tree and display fallback UI.",
      category: "Error Handling",
      difficulty: "easy",
      tags: ["error-boundary", "error-handling"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "What is the purpose of React.Portal?",
      type: "multiple-choice",
      explanation:
        "React.Portal allows you to render children into a different DOM node outside the parent component.",
      category: "Portal",
      difficulty: "easy",
      tags: ["portal", "dom"],
      points: 1,
    },
    {
      id: "react-junior-22",
      question: "Which of the following describes a controlled component in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A component with styling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component with validation",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A component whose value is controlled by React state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component that controls other components",
          isCorrect: false,
        },
      ],
      explanation:
        "Controlled components have their value controlled by React state. This is a core React principle.",
      category: "React Forms",
      difficulty: "easy",
      tags: ["react", "forms", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-23",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Accessing context",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Managing component state",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Optimizing performance",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Handling side effects",
          isCorrect: false,
        },
      ],
      explanation:
        "useState is a Hook that lets you add state to functional components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "easy",
      tags: ["react", "hooks", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-24",
      question: "What is React state? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "External data",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Computed data",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Static data",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Data that can change over time",
          isCorrect: true,
        },
      ],
      explanation:
        "State is data that can change over time and affects what the component renders. This is a core React principle.",
      category: "React State",
      difficulty: "easy",
      tags: ["react", "state", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-25",
      question: "What is a React component?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A CSS class",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A HTML element",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A JavaScript function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A reusable piece of UI",
          isCorrect: true,
        },
      ],
      explanation:
        "React components are reusable pieces of UI that can be composed together. This is a core React principle.",
      category: "React Components",
      difficulty: "easy",
      tags: ["react", "components", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-26",
      question: "Which of the following describes useState used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Handling side effects",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Accessing context",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Managing component state",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Optimizing performance",
          isCorrect: false,
        },
      ],
      explanation:
        "useState is a Hook that lets you add state to functional components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "easy",
      tags: ["react", "hooks", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-28",
      question: "What is React? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library for building user interfaces",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A complete framework like Angular",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
      ],
      explanation: "React is a JavaScript library for building user interfaces",
      category: "React Basics",
      difficulty: "easy",
      tags: ["react", "basics", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-29",
      question: "What is useEffect used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling side effects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
      ],
      explanation:
        "useEffect is used to handle side effects like data fetching and subscriptions. This is a core React principle.",
      category: "React Lifecycle",
      difficulty: "easy",
      tags: ["react", "lifecycle", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "Which of the following describes a React component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reusable piece of UI",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A JavaScript function",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A HTML element",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS class",
          isCorrect: false,
        },
      ],
      explanation:
        "React components are reusable pieces of UI that can be composed together. This is a core React principle.",
      category: "React Components",
      difficulty: "easy",
      tags: ["react", "components", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "Which of the following describes useEffect used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling side effects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
      ],
      explanation:
        "useEffect is used to handle side effects like data fetching and subscriptions. This is a core React principle.",
      category: "React Lifecycle",
      difficulty: "easy",
      tags: ["react", "lifecycle", "react", "junior"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "react-intermediate-1",
      question: "What is the purpose of useEffect hook?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To perform side effects in functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation: "useEffect hook is used to perform side effects like data fetching",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "side-effects"],
      points: 2,
    },
    {
      id: "react-intermediate-2",
      question: "What is the purpose of useReducer?",
      type: "multiple-choice",
      explanation: "useReducer is a hook for managing complex state logic with a reducer function.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "reducer"],
      points: 2,
    },
    {
      id: "react-intermediate-3",
      question: "What is the purpose of useContext?",
      type: "multiple-choice",
      explanation:
        "useContext is a hook that allows you to access React context values in functional components.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "context"],
      points: 2,
    },
    {
      id: "react-intermediate-4",
      question: "What is the purpose of useMemo?",
      type: "multiple-choice",
      explanation:
        "useMemo is a hook that memoizes expensive calculations to avoid recalculating on every render.",
      category: "Performance",
      difficulty: "medium",
      tags: ["hooks", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-5",
      question: "What is the purpose of useCallback?",
      type: "multiple-choice",
      explanation:
        "useCallback is a hook that memoizes functions to prevent unnecessary re-renders of child components.",
      category: "Performance",
      difficulty: "medium",
      tags: ["hooks", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-6",
      question: "What is the purpose of React.memo?",
      type: "multiple-choice",
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the result.",
      category: "Performance",
      difficulty: "medium",
      tags: ["memo", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-7",
      question: "What is the purpose of React.lazy?",
      type: "multiple-choice",
      explanation: "React.lazy allows you to lazy load components",
      category: "Performance",
      difficulty: "medium",
      tags: ["lazy", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-8",
      question: "What is the purpose of React.Suspense?",
      type: "multiple-choice",
      explanation: "React.Suspense allows you to handle loading states for lazy-loaded components.",
      category: "Performance",
      difficulty: "medium",
      tags: ["suspense", "loading"],
      points: 2,
    },
    {
      id: "react-intermediate-9",
      question: "What is the purpose of React Context?",
      type: "multiple-choice",
      explanation:
        "React Context allows you to share data between components without prop drilling.",
      category: "Context",
      difficulty: "medium",
      tags: ["context", "data-sharing"],
      points: 2,
    },
    {
      id: "react-intermediate-10",
      question: "What is the purpose of React Router?",
      type: "multiple-choice",
      explanation:
        "React Router is a library for handling navigation and routing in single-page applications.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "navigation"],
      points: 2,
    },
    {
      id: "react-intermediate-11",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-12",
      question: "What are React Error Boundaries used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Validating forms",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Catching JavaScript errors",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Handling network errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "Error Boundaries catch JavaScript errors anywhere in the component tree. This is a core React principle.",
      category: "React Error Boundaries",
      difficulty: "medium",
      tags: ["react", "error-boundaries", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-13",
      question: "What is the Compound Component pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-14",
      question: "Which of the following describes React Context used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-16",
      question: "What is useRef used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Accessing DOM elements",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "useRef provides a way to access DOM elements and persist values across renders. This is a core React principle.",
      category: "React Refs",
      difficulty: "medium",
      tags: ["react", "refs", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-17",
      question: "What is React Suspense used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling errors",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling loading states",
          isCorrect: true,
        },
      ],
      explanation:
        "React Suspense allows components to wait for something before rendering. This is a core React principle.",
      category: "React Suspense",
      difficulty: "medium",
      tags: ["react", "suspense", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-18",
      question: "Which of the following describes React Suspense used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling errors",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling loading states",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "React Suspense allows components to wait for something before rendering. This is a core React principle.",
      category: "React Suspense",
      difficulty: "medium",
      tags: ["react", "suspense", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-20",
      question: "What is a custom hook in React? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A built-in React hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A function that uses other hooks",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom hooks are functions that use other hooks and can be reused across components. This is a core React principle.",
      category: "React Custom Hooks",
      difficulty: "medium",
      tags: ["react", "custom-hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-21",
      question: "What is React Context used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-22",
      question: "Which of the following describes React Testing Library used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "E2E testing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Testing user interactions",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Integration testing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Unit testing",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library focuses on testing components from the users perspective. This is a core React principle.",
      category: "React Testing",
      difficulty: "medium",
      tags: ["react", "testing", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-24",
      question: "What is React Testing Library used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Testing user interactions",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Integration testing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "E2E testing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Unit testing",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library focuses on testing components from the users perspective. This is a core React principle.",
      category: "React Testing",
      difficulty: "medium",
      tags: ["react", "testing", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-25",
      question: "What are React Error Boundaries used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Catching JavaScript errors",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Handling network errors",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Validating forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Error Boundaries catch JavaScript errors anywhere in the component tree. This is a core React principle.",
      category: "React Error Boundaries",
      difficulty: "medium",
      tags: ["react", "error-boundaries", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-26",
      question: "Which of the following describes the purpose of useCallback?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "To memoize functions and prevent unnecessary re-renders",
          isCorrect: true,
        },
        {
          id: "c",
          text: "To perform side effects",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To access context values",
          isCorrect: false,
        },
      ],
      explanation:
        "useCallback memoizes functions to prevent unnecessary re-renders of child components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "medium",
      tags: ["react", "hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-28",
      question: "What is React Context used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-29",
      question: "What is React.memo used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Preventing unnecessary re-renders",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders. This is a core React principle.",
      category: "React Performance",
      difficulty: "medium",
      tags: ["react", "performance", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-30",
      question: "Which of the following describes React.memo used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Preventing unnecessary re-renders",
          isCorrect: true,
        },
      ],
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders. This is a core React principle.",
      category: "React Performance",
      difficulty: "medium",
      tags: ["react", "performance", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-27",
      question: "What are React Portals used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Rendering children outside the DOM hierarchy",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "Portals provide a way to render children into a DOM node outside the parent component. This is a core React principle.",
      category: "React Portals",
      difficulty: "medium",
      tags: ["react", "portals", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-28",
      question: "What is the Compound Component pattern? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-29",
      question: "What is a custom hook in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A built-in React hook",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A function that uses other hooks",
          isCorrect: true,
        },
      ],
      explanation:
        "Custom hooks are functions that use other hooks and can be reused across components. This is a core React principle.",
      category: "React Custom Hooks",
      difficulty: "medium",
      tags: ["react", "custom-hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-30",
      question: "Which of the following describes the Compound Component pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "react-senior-1",
      question: "How would you optimize a React application with performance issues?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Use only class components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Remove all hooks",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Use only functional components",
          isCorrect: false,
        },
      ],
      explanation: "React performance optimization involves using React.memo",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "optimization", "memoization"],
      points: 3,
    },
    {
      id: "react-senior-2",
      question: "How would you implement a custom hook for data fetching?",
      type: "multiple-choice",
      explanation:
        "Custom hooks for data fetching typically use useState to manage data/loading/error states and useEffect for the actual fetching with proper cleanup.",
      category: "Custom Hooks",
      difficulty: "hard",
      tags: ["hooks", "data-fetching", "custom"],
      points: 3,
    },
    {
      id: "react-senior-3",
      question: "What is the purpose of useLayoutEffect?",
      type: "multiple-choice",
      explanation:
        "useLayoutEffect runs synchronously after all DOM mutations but before the browser paints",
      category: "Hooks",
      difficulty: "hard",
      tags: ["hooks", "dom", "performance"],
      points: 3,
    },
    {
      id: "react-senior-5",
      question: "What is the purpose of React Concurrent Features?",
      type: "multiple-choice",
      explanation: "React Concurrent Features enable interruptible rendering",
      category: "Concurrent Features",
      difficulty: "hard",
      tags: ["concurrent", "rendering", "performance"],
      points: 3,
    },
    {
      id: "react-senior-6",
      question: "What is the purpose of React Server Components?",
      type: "multiple-choice",
      explanation: "React Server Components allow rendering components on the server",
      category: "Server Components",
      difficulty: "hard",
      tags: ["server-components", "performance"],
      points: 3,
    },
    {
      id: "react-senior-6",
      question: "Which of the following describes React Fiber?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reconciliation algorithm",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
      ],
      explanation:
        "React Fiber is the reconciliation algorithm that powers Reacts rendering. This is a core React principle.",
      category: "React Fiber",
      difficulty: "hard",
      tags: ["react", "fiber", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-7",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-8",
      question: "What is React Concurrent Mode? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A set of features that help apps stay responsive",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
      ],
      explanation:
        "React Concurrent Mode is a set of features that help apps stay responsive and gracefully adjust to the users device capabilities. This is a core React principle.",
      category: "React Advanced",
      difficulty: "hard",
      tags: ["react", "advanced", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-9",
      question: "What is the Flux architecture pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A unidirectional data flow pattern",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A bidirectional data flow pattern",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A random data flow pattern",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A circular data flow pattern",
          isCorrect: false,
        },
      ],
      explanation:
        "Flux is a unidirectional data flow pattern that complements Reacts composable view components. This is a core React principle.",
      category: "React Architecture",
      difficulty: "hard",
      tags: ["react", "architecture", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-10",
      question: "Which of the following describes Suspense for Data Fetching?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A way to handle async data loading",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A way to handle routing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A way to handle errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A way to handle styling",
          isCorrect: false,
        },
      ],
      explanation:
        "Suspense for Data Fetching allows components to suspend rendering while data is being fetched. This is a core React principle.",
      category: "React Suspense",
      difficulty: "hard",
      tags: ["react", "suspense", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-12",
      question: "What is React Fiber? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reconciliation algorithm",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
      ],
      explanation:
        "React Fiber is the reconciliation algorithm that powers Reacts rendering. This is a core React principle.",
      category: "React Fiber",
      difficulty: "hard",
      tags: ["react", "fiber", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-13",
      question: "What is React DevTools Profiler used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-14",
      question: "Which of the following describes the Flux architecture pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A bidirectional data flow pattern",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A unidirectional data flow pattern",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A circular data flow pattern",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A random data flow pattern",
          isCorrect: false,
        },
      ],
      explanation:
        "Flux is a unidirectional data flow pattern that complements Reacts composable view components. This is a core React principle.",
      category: "React Architecture",
      difficulty: "hard",
      tags: ["react", "architecture", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-16",
      question: "What is the Render Props pattern? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-17",
      question: "What is React Testing Librarys philosophy?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-18",
      question: "Which of the following describes React Concurrent Mode?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A set of features that help apps stay responsive",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
      ],
      explanation:
        "React Concurrent Mode is a set of features that help apps stay responsive and gracefully adjust to the users device capabilities. This is a core React principle.",
      category: "React Advanced",
      difficulty: "hard",
      tags: ["react", "advanced", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-20",
      question: "What are React Server Components? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Components that run on the server",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Components that run everywhere",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Components that run nowhere",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Components that run on the client",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components run on the server and can access backend resources directly. This is a core React principle.",
      category: "React Server Components",
      difficulty: "hard",
      tags: ["react", "server-components", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-21",
      question: "What is code splitting in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Splitting state",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Splitting components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Splitting code into smaller chunks",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Splitting props",
          isCorrect: false,
        },
      ],
      explanation:
        "Code splitting allows you to split your code into smaller chunks that can be loaded on demand. This is a core React principle.",
      category: "React Optimization",
      difficulty: "hard",
      tags: ["react", "optimization", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-22",
      question: "Which of the following describes the Render Props pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-24",
      question: "What is React DevTools Profiler used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-25",
      question: "What are React Server Components?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Components that run everywhere",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that run on the server",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Components that run nowhere",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Components that run on the client",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components run on the server and can access backend resources directly. This is a core React principle.",
      category: "React Server Components",
      difficulty: "hard",
      tags: ["react", "server-components", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-26",
      question: "Which of the following describes React Testing Librarys philosophy?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is React Testing Librarys philosophy? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-29",
      question: "What is the Render Props pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes code splitting in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Splitting props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Splitting state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Splitting code into smaller chunks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Splitting components",
          isCorrect: false,
        },
      ],
      explanation:
        "Code splitting allows you to split your code into smaller chunks that can be loaded on demand. This is a core React principle.",
      category: "React Optimization",
      difficulty: "hard",
      tags: ["react", "optimization", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is Suspense for Data Fetching? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A way to handle errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A way to handle styling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A way to handle routing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A way to handle async data loading",
          isCorrect: true,
        },
      ],
      explanation:
        "Suspense for Data Fetching allows components to suspend rendering while data is being fetched. This is a core React principle.",
      category: "React Suspense",
      difficulty: "hard",
      tags: ["react", "suspense", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes React DevTools Profiler used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is the purpose of React Aria? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-29",
      question: "What is the purpose of React Aria?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes the purpose of React Aria?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const NEXTJS_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "nextjs-junior-1",
      question: "What is Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A React framework for production",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A JavaScript library",
          isCorrect: false,
        },
      ],
      explanation:
        "Next.js is a React framework that provides additional features like server-side rendering",
      category: "Next.js Basics",
      difficulty: "easy",
      tags: ["basics", "framework"],
      points: 1,
    },
    {
      id: "nextjs-junior-2",
      question: "What command is used to create a new Next.js project?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "npx create-next-app@latest",
          isCorrect: true,
        },
        {
          id: "b",
          text: "npm create next-app",
          isCorrect: false,
        },
        {
          id: "c",
          text: "yarn create nextjs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "next new project",
          isCorrect: false,
        },
      ],
      explanation:
        "The official way to create a new Next.js project is using npx create-next-app@latest command.",
      category: "Setup",
      difficulty: "easy",
      tags: ["setup", "cli", "create"],
      points: 1,
    },
    {
      id: "nextjs-junior-3",
      question: "Which file is used to configure Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "next.config.js",
          isCorrect: true,
        },
        {
          id: "b",
          text: "config.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "next.js",
          isCorrect: false,
        },
        {
          id: "d",
          text: "app.config.js",
          isCorrect: false,
        },
      ],
      explanation: "Next.js uses next.config.js file for configuration settings.",
      category: "Configuration",
      difficulty: "easy",
      tags: ["config", "setup"],
      points: 1,
    },
    {
      id: "nextjs-junior-4",
      question: "What is the default port for Next.js development server?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "3000",
          isCorrect: true,
        },
        {
          id: "b",
          text: "8080",
          isCorrect: false,
        },
        {
          id: "c",
          text: "5000",
          isCorrect: false,
        },
        {
          id: "d",
          text: "4000",
          isCorrect: false,
        },
      ],
      explanation: "Next.js development server runs on port 3000 by default.",
      category: "Development",
      difficulty: "easy",
      tags: ["dev-server", "port"],
      points: 1,
    },
    {
      id: "nextjs-junior-5",
      question: "What is the purpose of the _app.js file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To customize the default App component",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To define API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To configure build settings",
          isCorrect: false,
        },
      ],
      explanation:
        "The _app.js file allows you to customize the default App component and add global styles.",
      category: "App Structure",
      difficulty: "easy",
      tags: ["app", "customization"],
      points: 1,
    },
    {
      id: "nextjs-junior-6",
      question: "What is the purpose of the _document.js file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To customize the HTML document structure",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To define page components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage state",
          isCorrect: false,
        },
      ],
      explanation:
        "The _document.js file allows you to customize the HTML document structure including <html>, <head>, and <body> tags.",
      category: "App Structure",
      difficulty: "easy",
      tags: ["document", "html", "structure"],
      points: 1,
    },
    {
      id: "nextjs-junior-7",
      question: "What is the purpose of the pages directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define routes and pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure the app",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The pages directory is used to define routes and pages in Next.js. Each file becomes a route.",
      category: "Routing",
      difficulty: "easy",
      tags: ["pages", "routing", "file-system"],
      points: 1,
    },
    {
      id: "nextjs-junior-8",
      question: "What is the purpose of the public directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store static assets",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The public directory stores static assets like images, icons, and other files that can be referenced directly.",
      category: "Static Assets",
      difficulty: "easy",
      tags: ["public", "static", "assets"],
      points: 1,
    },
    {
      id: "nextjs-junior-9",
      question: "What is the purpose of the styles directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store CSS files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store images",
          isCorrect: false,
        },
      ],
      explanation:
        "The styles directory is used to store CSS files and stylesheets for the application.",
      category: "Styling",
      difficulty: "easy",
      tags: ["styles", "css", "styling"],
      points: 1,
    },
    {
      id: "nextjs-junior-10",
      question: "What is the purpose of the components directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store reusable React components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store styles",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store images",
          isCorrect: false,
        },
      ],
      explanation:
        "The components directory is used to store reusable React components that can be imported and used across the application.",
      category: "Components",
      difficulty: "easy",
      tags: ["components", "reusable", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-11",
      question: "What is the purpose of the lib directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store utility functions and libraries",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The lib directory is used to store utility functions, helper functions, and third-party library configurations.",
      category: "Utilities",
      difficulty: "easy",
      tags: ["lib", "utilities", "helpers"],
      points: 1,
    },
    {
      id: "nextjs-junior-12",
      question: "What is the purpose of the hooks directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store custom React hooks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The hooks directory is used to store custom React hooks that can be reused across components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "custom", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-13",
      question: "What is the purpose of the utils directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store utility functions and helpers",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The utils directory is used to store utility functions, helper functions, and common logic that can be reused.",
      category: "Utilities",
      difficulty: "easy",
      tags: ["utils", "utilities", "helpers"],
      points: 1,
    },
    {
      id: "nextjs-junior-14",
      question: "What is the purpose of the types directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store TypeScript type definitions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The types directory is used to store TypeScript type definitions, interfaces, and type declarations.",
      category: "TypeScript",
      difficulty: "easy",
      tags: ["types", "typescript", "interfaces"],
      points: 1,
    },
    {
      id: "nextjs-junior-15",
      question: "What is the purpose of the constants directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store application constants and configuration values",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The constants directory is used to store application constants, configuration values, and static data.",
      category: "Constants",
      difficulty: "easy",
      tags: ["constants", "config", "static"],
      points: 1,
    },
    {
      id: "nextjs-junior-16",
      question: "What is the purpose of the context directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store React Context providers and consumers",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The context directory is used to store React Context providers and consumers for state management.",
      category: "State Management",
      difficulty: "easy",
      tags: ["context", "state", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-17",
      question: "What is the purpose of the services directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store service functions and API calls",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The services directory is used to store service functions, API calls, and external service integrations.",
      category: "Services",
      difficulty: "easy",
      tags: ["services", "api", "external"],
      points: 1,
    },
    {
      id: "nextjs-junior-18",
      question: "What is the purpose of the middleware directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store middleware functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The middleware directory is used to store middleware functions that run before requests are processed.",
      category: "Middleware",
      difficulty: "easy",
      tags: ["middleware", "requests", "processing"],
      points: 1,
    },
    {
      id: "nextjs-junior-19",
      question: "What is the purpose of the api directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define API routes and endpoints",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The api directory is used to define API routes and endpoints that can be accessed via HTTP requests.",
      category: "API Routes",
      difficulty: "easy",
      tags: ["api", "routes", "endpoints"],
      points: 1,
    },
    {
      id: "nextjs-junior-20",
      question: "What is the purpose of the data directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store data files and mock data",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The data directory is used to store data files, mock data, and static data for the application.",
      category: "Data",
      difficulty: "easy",
      tags: ["data", "mock", "static"],
      points: 1,
    },
    {
      id: "nextjs-junior-21",
      question: "What is the purpose of the store directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store state management logic",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The store directory is used to store state management logic, Redux stores, or other state management solutions.",
      category: "State Management",
      difficulty: "easy",
      tags: ["store", "state", "redux"],
      points: 1,
    },
    {
      id: "nextjs-junior-22",
      question: "What is the purpose of the config directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store configuration files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The config directory is used to store configuration files and settings for the application.",
      category: "Configuration",
      difficulty: "easy",
      tags: ["config", "settings", "configuration"],
      points: 1,
    },
    {
      id: "nextjs-junior-23",
      question: "What is the purpose of the tests directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store test files and testing utilities",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The tests directory is used to store test files, testing utilities, and test configurations.",
      category: "Testing",
      difficulty: "easy",
      tags: ["tests", "testing", "utilities"],
      points: 1,
    },
    {
      id: "nextjs-junior-24",
      question: "What is the purpose of the docs directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store documentation files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The docs directory is used to store documentation files, README files, and project documentation.",
      category: "Documentation",
      difficulty: "easy",
      tags: ["docs", "documentation", "readme"],
      points: 1,
    },
    {
      id: "nextjs-junior-25",
      question: "What is the purpose of the scripts directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store build and deployment scripts",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The scripts directory is used to store build scripts, deployment scripts, and automation scripts.",
      category: "Scripts",
      difficulty: "easy",
      tags: ["scripts", "build", "deployment"],
      points: 1,
    },
    {
      id: "nextjs-junior-26",
      question: "What is the purpose of the .next directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store build output and cache files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The .next directory is used to store build output, cache files, and compiled assets.",
      category: "Build",
      difficulty: "easy",
      tags: ["next", "build", "cache"],
      points: 1,
    },
    {
      id: "nextjs-junior-27",
      question: "What is the purpose of the node_modules directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store installed npm packages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The node_modules directory stores all installed npm packages and their dependencies.",
      category: "Dependencies",
      difficulty: "easy",
      tags: ["node_modules", "packages", "dependencies"],
      points: 1,
    },
    {
      id: "nextjs-junior-28",
      question: "What is the purpose of the package.json file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define project metadata and dependencies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The package.json file defines project metadata, dependencies, scripts, and configuration.",
      category: "Project Configuration",
      difficulty: "easy",
      tags: ["package.json", "metadata", "dependencies"],
      points: 1,
    },
    {
      id: "nextjs-junior-29",
      question: "What is the purpose of the package-lock.json file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To lock dependency versions for consistent installs",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The package-lock.json file locks dependency versions to ensure consistent installs across environments.",
      category: "Dependencies",
      difficulty: "easy",
      tags: ["package-lock", "versions", "consistency"],
      points: 1,
    },
    {
      id: "nextjs-junior-30",
      question: "What is the purpose of the .gitignore file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To specify files and directories to ignore in Git",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The .gitignore file specifies files and directories that Git should ignore and not track.",
      category: "Version Control",
      difficulty: "easy",
      tags: ["gitignore", "git", "ignore"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "nextjs-intermediate-1",
      question: "Which rendering methods does Next.js support? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Static Site Generation (SSG)",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Server-Side Rendering (SSR)",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Client-Side Rendering (CSR)",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Incremental Static Regeneration (ISR)",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Next.js supports multiple rendering methods including SSG",
      category: "Rendering",
      difficulty: "medium",
      tags: ["rendering", "ssg", "ssr"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-2",
      question: "What is the difference between getStaticProps and getServerSideProps?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "getStaticProps runs at build time, getServerSideProps runs on each request",
          isCorrect: true,
        },
        {
          id: "b",
          text: "getStaticProps runs on each request, getServerSideProps runs at build time",
          isCorrect: false,
        },
        {
          id: "c",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "getStaticProps is deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "getStaticProps pre-renders pages at build time, while getServerSideProps renders pages on each request.",
      category: "Data Fetching",
      difficulty: "medium",
      tags: ["data-fetching", "static", "server-side"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-3",
      question: "What is the purpose of getStaticPaths in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define which paths will be pre-rendered at build time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To define API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To define middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "getStaticPaths is used with getStaticProps to specify which dynamic routes should be pre-rendered at build time.",
      category: "Static Generation",
      difficulty: "medium",
      tags: ["static-paths", "pre-rendering", "dynamic-routes"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-4",
      question: "What is Incremental Static Regeneration (ISR) in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A feature that allows updating static pages after build time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A feature for server-side rendering",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A feature for client-side rendering",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A feature for API routes",
          isCorrect: false,
        },
      ],
      explanation:
        "ISR allows you to update static pages after build time without rebuilding the entire site.",
      category: "Static Generation",
      difficulty: "medium",
      tags: ["isr", "static-regeneration", "updates"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-5",
      question:
        "Your Next.js blog has 10,000 articles and you need to implement API routes for a search feature. The current setup uses pages/api. What's the main performance concern you should address?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement proper caching and pagination to avoid memory issues",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Move API routes to a separate server",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Use only static generation for all articles",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Disable API routes completely",
          isCorrect: false,
        },
      ],
      explanation:
        "With large datasets, API routes need proper caching strategies and pagination to prevent memory issues and improve response times. This is crucial for search functionality.",
      category: "API Routes",
      difficulty: "medium",
      tags: ["api-routes", "performance", "caching", "pagination"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-6",
      question:
        "Your e-commerce site's product images are causing slow page loads. The LCP (Largest Contentful Paint) is 3.8 seconds. You're currently using regular img tags. What's the most effective immediate solution?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Replace img tags with next/image and add priority prop to above-the-fold images",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Compress all images manually",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Move images to a CDN",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Remove all product images",
          isCorrect: false,
        },
      ],
      explanation:
        "next/image provides automatic optimization, WebP conversion, lazy loading, and responsive sizing. The priority prop ensures above-the-fold images load immediately, significantly improving LCP.",
      category: "Performance",
      difficulty: "medium",
      tags: ["next-image", "lcp", "optimization", "priority"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-7",
      question: "What is the purpose of the next/link component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To enable client-side navigation between pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create external links",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create buttons",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create forms",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/link component enables client-side navigation between pages for better performance.",
      category: "Navigation",
      difficulty: "medium",
      tags: ["navigation", "client-side", "performance"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-8",
      question: "What is the purpose of the next/head component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To add elements to the document head",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create page headers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create navigation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create footers",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/head component allows you to add elements to the document head, such as title, meta tags, and scripts.",
      category: "SEO",
      difficulty: "medium",
      tags: ["head", "seo", "meta-tags"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-9",
      question: "What is the purpose of the next/router in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation programmatically",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create components",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/router provides access to router information and methods for programmatic navigation.",
      category: "Routing",
      difficulty: "medium",
      tags: ["router", "navigation", "programmatic"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-10",
      question: "What is the purpose of the next/dynamic component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To load components dynamically with code splitting",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create dynamic routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create dynamic imports",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create dynamic styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/dynamic component enables dynamic imports with code splitting for better performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["dynamic-imports", "code-splitting", "performance"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-11",
      question: "What is the purpose of the next/script component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To optimize third-party scripts with loading strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create custom scripts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create inline scripts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create server scripts",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/script component optimizes third-party scripts with different loading strategies.",
      category: "Performance",
      difficulty: "medium",
      tags: ["scripts", "third-party", "optimization"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-12",
      question: "What is the purpose of the next/font component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To optimize font loading and reduce layout shift",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create custom fonts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To edit fonts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store fonts",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/font component optimizes font loading and reduces layout shift for better performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["fonts", "optimization", "layout-shift"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-13",
      question: "What is the purpose of middleware in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To run code before a request is completed",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create pages",
          isCorrect: false,
        },
      ],
      explanation:
        "Middleware in Next.js runs code before a request is completed, allowing you to modify the response.",
      category: "Middleware",
      difficulty: "medium",
      tags: ["middleware", "requests", "processing"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-14",
      question: "What is the purpose of the App Router in Next.js 13+?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To provide a new routing system with layouts and nested routes",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "The App Router provides a new routing system with layouts, nested routes, and improved performance.",
      category: "Routing",
      difficulty: "medium",
      tags: ["app-router", "routing", "layouts"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-15",
      question: "What is the purpose of Server Components in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render components on the server for better performance",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Client Components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components render on the server, reducing the JavaScript bundle size and improving performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["server-components", "performance", "rendering"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-16",
      question: "What is the purpose of Client Components in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render components on the client with interactivity",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Server Components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "Client Components render on the client and can use browser APIs and React hooks for interactivity.",
      category: "Components",
      difficulty: "medium",
      tags: ["client-components", "interactivity", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-17",
      question: "What is the purpose of layouts in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To share UI between multiple pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace API routes",
          isCorrect: false,
        },
      ],
      explanation:
        "Layouts allow you to share UI between multiple pages while preserving state and avoiding re-renders.",
      category: "Layouts",
      difficulty: "medium",
      tags: ["layouts", "ui", "sharing"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-18",
      question: "What is the purpose of loading.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show loading UI while a page is loading",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "loading.js files create loading UI that shows while a page is loading in the App Router.",
      category: "Loading",
      difficulty: "medium",
      tags: ["loading", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-19",
      question: "What is the purpose of error.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show error UI when something goes wrong",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "error.js files create error UI that shows when something goes wrong in the App Router.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["error-handling", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-20",
      question: "What is the purpose of not-found.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show UI when a page is not found",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "not-found.js files create UI that shows when a page is not found in the App Router.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["not-found", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-21",
      question: "What is the purpose of route groups in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To organize routes without affecting the URL structure",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Route groups allow you to organize routes into logical groups without affecting the URL structure.",
      category: "Routing",
      difficulty: "medium",
      tags: ["route-groups", "organization", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-22",
      question: "What is the purpose of parallel routes in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render multiple pages simultaneously in the same layout",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Parallel routes allow you to render multiple pages simultaneously in the same layout.",
      category: "Routing",
      difficulty: "medium",
      tags: ["parallel-routes", "simultaneous", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-23",
      question: "What is the purpose of intercepting routes in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept route navigation and show different UI",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Intercepting routes allow you to intercept route navigation and show different UI, like modals.",
      category: "Routing",
      difficulty: "medium",
      tags: ["intercepting-routes", "navigation", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-24",
      question: "What is the purpose of the useSearchParams hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read and update URL search parameters",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useSearchParams allows you to read and update URL search parameters in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["search-params", "url", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-25",
      question: "What is the purpose of the usePathname hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read the current pathname",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation: "usePathname allows you to read the current pathname in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["pathname", "url", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-26",
      question: "What is the purpose of the useParams hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read dynamic route parameters",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace usePathname",
          isCorrect: false,
        },
      ],
      explanation: "useParams allows you to read dynamic route parameters in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["params", "dynamic-routes", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-27",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-28",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-29",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-30",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "nextjs-senior-1",
      question:
        "Your Next.js e-commerce application is experiencing slow page loads due to large product images. The LCP (Largest Contentful Paint) is 4.2 seconds. What's the most effective immediate solution?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement next/image with priority loading and WebP format",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Use regular img tags with lazy loading",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Compress images using external tools only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Move all images to a CDN without optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "next/image provides automatic optimization, WebP conversion, lazy loading, and priority loading for above-the-fold content, making it the most effective solution for improving LCP.",
      category: "Performance Optimization",
      difficulty: "hard",
      tags: ["performance", "images", "lcp", "next-image"],
      points: 3,
    },
    {
      id: "nextjs-senior-2",
      question:
        "A client reports that their Next.js app's accessibility score dropped from 95 to 78 after adding dynamic content. Screen readers can't announce new content updates. What's the most likely cause?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Missing aria-live regions for dynamic content updates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Incorrect color contrast ratios",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Missing alt text on images",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Incorrect heading hierarchy",
          isCorrect: false,
        },
      ],
      explanation:
        "Dynamic content updates require aria-live regions to announce changes to screen readers. Without proper aria-live implementation, screen readers won't know about content changes.",
      category: "Accessibility",
      difficulty: "hard",
      tags: ["accessibility", "aria-live", "screen-readers", "dynamic-content"],
      points: 3,
    },
    {
      id: "nextjs-senior-3",
      question:
        "Your Next.js application needs to support 15 different languages with RTL support for Arabic and Hebrew. The current i18n setup only handles basic translations. What's the most critical missing piece?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "RTL layout direction configuration and locale-specific routing",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Additional translation files",
          isCorrect: false,
        },
        {
          id: "c",
          text: "More language detection logic",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Additional font loading",
          isCorrect: false,
        },
      ],
      explanation:
        "RTL support requires specific layout direction configuration, CSS direction properties, and locale-specific routing to properly handle right-to-left languages like Arabic and Hebrew.",
      category: "Internationalization",
      difficulty: "hard",
      tags: ["i18n", "rtl", "localization", "routing"],
      points: 3,
    },
    {
      id: "nextjs-senior-4",
      question:
        "Your Next.js blog has 10,000 articles and you need to implement API routes for a search feature. The current setup uses pages/api. What's the main performance concern you should address?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Database query optimization and caching strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Moving to App Router API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Adding more API endpoints",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Implementing pagination only",
          isCorrect: false,
        },
      ],
      explanation:
        "With 10,000 articles, the main concern is database performance. You need query optimization, proper indexing, caching strategies, and efficient search algorithms to handle the scale.",
      category: "API Performance",
      difficulty: "hard",
      tags: ["api", "performance", "database", "caching", "search"],
      points: 3,
    },
    {
      id: "nextjs-senior-5",
      question:
        "Your e-commerce site's product images are causing slow page loads. The LCP (Largest Contentful Paint) is 3.8 seconds. You're currently using regular img tags. What's the most effective immediate solution?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Replace with next/image component with priority loading",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Add lazy loading to existing img tags",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Compress images manually",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Move images to a CDN",
          isCorrect: false,
        },
      ],
      explanation:
        "next/image provides automatic optimization, WebP conversion, lazy loading, and priority loading. It's the most effective solution for improving LCP scores.",
      category: "Performance Optimization",
      difficulty: "hard",
      tags: ["performance", "images", "lcp", "next-image"],
      points: 3,
    },
    {
      id: "nextjs-senior-6",
      question:
        "Your Next.js application is experiencing memory leaks in production. The heap usage grows from 200MB to 2GB over 24 hours. Which debugging approach should you prioritize first?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Analyze heap snapshots and identify retained objects in Chrome DevTools",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Add more console.log statements throughout the code",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Restart the server every few hours",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Increase server memory allocation",
          isCorrect: false,
        },
      ],
      explanation:
        "Memory leak debugging requires heap snapshot analysis to identify retained objects and memory references that aren't being garbage collected properly.",
      category: "Debugging & Performance",
      difficulty: "hard",
      tags: ["memory-leaks", "debugging", "heap-snapshots", "performance"],
      points: 3,
    },
    {
      id: "nextjs-senior-7",
      question:
        "A client's Next.js app has inconsistent test coverage across components. Some components have 95% coverage while others have only 30%. What's the most effective strategy to improve overall test quality?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement test-driven development with mandatory coverage thresholds",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Write tests only for new components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Focus on testing only critical business logic",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Use automated test generation tools",
          isCorrect: false,
        },
      ],
      explanation:
        "TDD with coverage thresholds ensures consistent test quality across all components and prevents regression in test coverage over time.",
      category: "Testing Strategy",
      difficulty: "hard",
      tags: ["testing", "tdd", "coverage", "quality-assurance"],
      points: 3,
    },
    {
      id: "nextjs-senior-8",
      question:
        "Your Next.js application needs to deploy to multiple environments (dev, staging, production) with different configurations. The current deployment process is manual and error-prone. What's the most critical improvement needed?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement CI/CD pipeline with environment-specific configuration management",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Use Docker containers for all environments",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Create separate codebases for each environment",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Deploy everything to production first",
          isCorrect: false,
        },
      ],
      explanation:
        "CI/CD pipelines with proper environment configuration management eliminate manual errors and ensure consistent deployments across environments.",
      category: "DevOps & Deployment",
      difficulty: "hard",
      tags: ["cicd", "deployment", "environments", "automation"],
      points: 3,
    },
    {
      id: "nextjs-senior-9",
      question:
        "Your Next.js e-commerce site has poor Core Web Vitals scores. The LCP is 4.2s and CLS is 0.25. Which optimization strategy should you prioritize first?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement image optimization with next/image and WebP format",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Add more CSS animations for better user experience",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Increase bundle size with more JavaScript libraries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Disable server-side rendering to improve performance",
          isCorrect: false,
        },
      ],
      explanation:
        "Image optimization is the most impactful for LCP improvement. Using next/image with WebP format, proper sizing, and lazy loading can reduce LCP by 50-70%.",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "core-web-vitals", "lcp", "image-optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-10",
      question:
        "A client reports that their Next.js app's accessibility score dropped from 95 to 78 after adding dynamic content. Screen readers can't announce new content updates. What's the most likely cause?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Missing aria-live regions for dynamic content announcements",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Images don't have alt attributes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Forms lack proper labels",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Color contrast is insufficient",
          isCorrect: false,
        },
      ],
      explanation:
        "Dynamic content updates require aria-live regions to announce changes to screen readers. Without proper aria-live attributes, users with screen readers won't be notified of content changes.",
      category: "Accessibility",
      difficulty: "hard",
      tags: ["accessibility", "aria-live", "screen-readers", "dynamic-content"],
      points: 3,
    },
    {
      id: "nextjs-senior-11",
      question:
        "Your Next.js application needs to support 15 different languages with RTL support for Arabic and Hebrew. The current i18n setup only handles basic translations. What's the most critical missing piece?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Locale-based routing with proper RTL layout detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Adding more translation files",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Installing a translation library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Creating language-specific CSS files",
          isCorrect: false,
        },
      ],
      explanation:
        "For comprehensive i18n with RTL support, you need locale-based routing to handle different URL structures and automatic RTL layout detection. This ensures proper content flow and navigation for RTL languages.",
      category: "Internationalization",
      difficulty: "hard",
      tags: ["i18n", "rtl", "routing", "locale", "arabic", "hebrew"],
      points: 3,
    },
    {
      id: "nextjs-senior-12",
      question:
        "Your Next.js API routes are experiencing high latency (800ms average response time) and occasional timeouts. The database queries are fast, but the API responses are slow. What's the most likely bottleneck?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Missing response caching and inefficient data serialization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Database connection pool size",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Server memory allocation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Network bandwidth limitations",
          isCorrect: false,
        },
      ],
      explanation:
        "High API latency with fast database queries typically indicates missing response caching and inefficient JSON serialization. Caching responses and optimizing data serialization can reduce response times by 60-80%.",
      category: "API Performance",
      difficulty: "hard",
      tags: ["api", "performance", "caching", "serialization", "latency"],
      points: 3,
    },
    {
      id: "nextjs-senior-13",
      question:
        "Your Next.js application's initial bundle size is 2.1MB, causing slow page loads. The bundle analyzer shows that 40% of the code is unused libraries. What's the most effective optimization strategy?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement dynamic imports and remove unused dependencies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Compress all images to reduce bundle size",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Move all components to separate files",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Use a different bundler like Webpack",
          isCorrect: false,
        },
      ],
      explanation:
        "Dynamic imports enable code splitting and lazy loading, while removing unused dependencies eliminates dead code. This combination can reduce bundle size by 50-70%.",
      category: "Bundle Optimization",
      difficulty: "hard",
      tags: ["bundle", "optimization", "dynamic-imports", "tree-shaking"],
      points: 3,
    },
    {
      id: "nextjs-senior-14",
      question:
        "Your Next.js application is experiencing database connection timeouts during peak traffic (1000+ concurrent users). The database server is healthy, but connections are failing. What's the most likely cause?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Insufficient connection pool size and missing connection reuse",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Database server memory issues",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Network latency between app and database",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Incorrect database credentials",
          isCorrect: false,
        },
      ],
      explanation:
        "Connection timeouts during high traffic typically indicate insufficient connection pool size. The pool can't handle the concurrent load, causing new connections to timeout while waiting for available connections.",
      category: "Database Performance",
      difficulty: "hard",
      tags: ["database", "connection-pooling", "performance", "scalability"],
      points: 3,
    },
    {
      id: "nextjs-senior-15",
      question:
        "A client's Next.js application has security vulnerabilities where users can access other users' data by manipulating URLs. The authentication system is working, but authorization checks are missing. What's the most critical fix needed?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement server-side authorization checks in API routes and middleware",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Add client-side route protection only",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Encrypt all user data in the database",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Use longer JWT tokens",
          isCorrect: false,
        },
      ],
      explanation:
        "Authorization vulnerabilities require server-side checks in API routes and middleware to prevent unauthorized data access. Client-side protection alone is insufficient as it can be bypassed.",
      category: "Security & Authorization",
      difficulty: "hard",
      tags: ["security", "authorization", "api-routes", "middleware"],
      points: 3,
    },
    {
      id: "nextjs-senior-16",
      question:
        "Your Next.js chat application needs to support 10,000 concurrent users with real-time messaging. The current polling approach causes high server load and delays. What's the most effective solution?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement WebSocket connections with Socket.io for bidirectional communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Increase polling frequency to reduce delays",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Use only Server-Sent Events for one-way communication",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Store all messages in localStorage for instant access",
          isCorrect: false,
        },
      ],
      explanation:
        "WebSocket connections with Socket.io provide efficient bidirectional real-time communication, eliminating polling overhead and reducing server load while maintaining low latency for 10,000+ concurrent users.",
      category: "Real-time Communication",
      difficulty: "hard",
      tags: ["websockets", "socketio", "realtime", "scalability"],
      points: 3,
    },
    {
      id: "nextjs-senior-17",
      question:
        "Your Next.js e-commerce site needs to track user behavior and conversion funnels. The current analytics setup only captures page views. What's the most critical missing component for meaningful insights?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Event tracking for user interactions and custom conversion goals",
          isCorrect: true,
        },
        {
          id: "b",
          text: "More detailed page view tracking",
          isCorrect: false,
        },
        {
          id: "c",
          text: "User session recording only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Server-side analytics only",
          isCorrect: false,
        },
      ],
      explanation:
        "Event tracking captures user interactions (clicks, form submissions, purchases) and enables conversion funnel analysis. This provides actionable insights beyond basic page views.",
      category: "Analytics & Tracking",
      difficulty: "hard",
      tags: ["analytics", "event-tracking", "conversion", "user-behavior"],
      points: 3,
    },
    {
      id: "nextjs-senior-18",
      question:
        "Your Next.js application is experiencing production errors that are difficult to debug. Error logs are scattered across multiple services, and you can't trace user sessions. What's the most effective debugging strategy?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Implement centralized logging with request tracing and error correlation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Add more console.log statements throughout the code",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Use only client-side error tracking",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Restart servers more frequently",
          isCorrect: false,
        },
      ],
      explanation:
        "Centralized logging with request tracing and error correlation provides end-to-end visibility into user sessions, making it possible to trace errors from client to database.",
      category: "Monitoring & Debugging",
      difficulty: "hard",
      tags: ["logging", "monitoring", "debugging", "tracing"],
      points: 3,
    },
    {
      id: "nextjs-senior-19",
      question: "How would you implement advanced microservices architecture with Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using API Gateway, service discovery, and inter-service communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only API Gateway",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only service discovery",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only inter-service communication",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced microservices involve API Gateway for routing, service discovery for locating services, and efficient inter-service communication patterns.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["microservices", "api-gateway", "service-discovery", "communication"],
      points: 3,
    },
    {
      id: "nextjs-senior-20",
      question: "How would you implement advanced GraphQL integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Apollo Client, schema stitching, and query optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Apollo Client",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only schema stitching",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only query optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced GraphQL integration involves Apollo Client for caching, schema stitching for federation, and query optimization for performance.",
      category: "GraphQL",
      difficulty: "hard",
      tags: ["graphql", "apollo", "schema-stitching", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-21",
      question: "How would you implement advanced WebAssembly integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using WASM modules, Web Workers, and performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only WASM modules",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Web Workers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only performance optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced WebAssembly integration involves WASM modules for high-performance code, Web Workers for background processing, and optimization for better performance.",
      category: "WebAssembly",
      difficulty: "hard",
      tags: ["wasm", "web-workers", "performance", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-22",
      question: "How would you implement advanced edge computing with Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Edge Functions, CDN optimization, and geographic distribution",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Edge Functions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CDN optimization",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only geographic distribution",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced edge computing involves Edge Functions for serverless computing, CDN optimization for content delivery, and geographic distribution for global performance.",
      category: "Edge Computing",
      difficulty: "hard",
      tags: ["edge", "cdn", "geographic", "distribution"],
      points: 3,
    },
    {
      id: "nextjs-senior-23",
      question: "How would you implement advanced progressive web app features in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using service workers, offline support, and app-like experience",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only service workers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only offline support",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only app-like experience",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced PWA features involve service workers for caching, offline support for reliability, and app-like experience for better user engagement.",
      category: "PWA",
      difficulty: "hard",
      tags: ["pwa", "service-workers", "offline", "app-like"],
      points: 3,
    },
    {
      id: "nextjs-senior-24",
      question: "How would you implement advanced machine learning integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using TensorFlow.js, model optimization, and inference caching",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only TensorFlow.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only model optimization",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only inference caching",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced ML integration involves TensorFlow.js for client-side inference, model optimization for performance, and inference caching for efficiency.",
      category: "Machine Learning",
      difficulty: "hard",
      tags: ["ml", "tensorflow", "optimization", "inference"],
      points: 3,
    },
    {
      id: "nextjs-senior-25",
      question: "How would you implement advanced blockchain integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Web3.js, smart contracts, and wallet integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Web3.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only smart contracts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only wallet integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced blockchain integration involves Web3.js for blockchain interaction, smart contracts for decentralized logic, and wallet integration for user connectivity.",
      category: "Blockchain",
      difficulty: "hard",
      tags: ["blockchain", "web3", "smart-contracts", "wallets"],
      points: 3,
    },
    {
      id: "nextjs-senior-26",
      question: "How would you implement advanced video streaming in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using HLS, adaptive bitrate streaming, and CDN optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only HLS",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only adaptive bitrate streaming",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only CDN optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced video streaming involves HLS for compatibility, adaptive bitrate streaming for quality, and CDN optimization for delivery.",
      category: "Video Streaming",
      difficulty: "hard",
      tags: ["video", "hls", "adaptive", "cdn"],
      points: 3,
    },
    {
      id: "nextjs-senior-27",
      question: "How would you implement advanced payment processing in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Stripe, webhook handling, and secure payment flows",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Stripe",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only webhook handling",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only secure payment flows",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced payment processing involves Stripe for payment processing, webhook handling for real-time updates, and secure payment flows for user safety.",
      category: "Payments",
      difficulty: "hard",
      tags: ["payments", "stripe", "webhooks", "security"],
      points: 3,
    },
    {
      id: "nextjs-senior-28",
      question: "How would you implement advanced email systems in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using SendGrid, template engines, and email analytics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only SendGrid",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only template engines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only email analytics",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced email systems involve SendGrid for delivery, template engines for dynamic content, and email analytics for tracking performance.",
      category: "Email",
      difficulty: "hard",
      tags: ["email", "sendgrid", "templates", "analytics"],
      points: 3,
    },
    {
      id: "nextjs-senior-29",
      question: "How would you implement advanced file storage in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using AWS S3, Cloudinary, and file optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only AWS S3",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Cloudinary",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only file optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced file storage involves AWS S3 for scalable storage, Cloudinary for image processing, and file optimization for performance.",
      category: "File Storage",
      difficulty: "hard",
      tags: ["storage", "s3", "cloudinary", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-30",
      question: "How would you implement advanced search functionality in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Elasticsearch, Algolia, and search optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Elasticsearch",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Algolia",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only search optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced search involves Elasticsearch for complex queries, Algolia for instant search, and optimization for better performance and relevance.",
      category: "Search",
      difficulty: "hard",
      tags: ["search", "elasticsearch", "algolia", "optimization"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const REDUX_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "redux-junior-1",
      question: "What is Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A predictable state container for JavaScript apps",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A JavaScript library",
          isCorrect: false,
        },
      ],
      explanation: "Redux is a predictable state container for JavaScript applications",
      category: "Redux Basics",
      difficulty: "easy",
      tags: ["basics", "state-management"],
      points: 1,
    },
    {
      id: "redux-junior-2",
      question: "What is the main purpose of Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To manage application state in a predictable way",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To style components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create animations",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux helps manage application state in a predictable way by following strict patterns",
      category: "Redux Basics",
      difficulty: "easy",
      tags: ["basics", "state-management"],
      points: 1,
    },
    {
      id: "redux-junior-3",
      question: "Which of the following is NOT a Redux principle?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Single source of truth",
          isCorrect: false,
        },
        {
          id: "b",
          text: "State is read-only",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Changes are made with pure functions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "State is mutable",
          isCorrect: true,
        },
      ],
      explanation:
        "Redux state is immutable (read-only), not mutable. Changes are made through pure functions called reducers",
      category: "Redux Principles",
      difficulty: "easy",
      tags: ["principles", "immutability"],
      points: 1,
    },
    {
      id: "redux-junior-4",
      question: "What is a Redux store?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A database",
          isCorrect: false,
        },
        {
          id: "b",
          text: "An object that holds the application state",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A function",
          isCorrect: false,
        },
      ],
      explanation:
        "A Redux store is an object that holds the application state and provides methods to access and update it",
      category: "Redux Store",
      difficulty: "easy",
      tags: ["store", "basics"],
      points: 1,
    },
    {
      id: "redux-junior-5",
      question: "What is an action in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A plain JavaScript object describing what happened",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A function that modifies state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "An action is a plain JavaScript object that describes what happened in the application",
      category: "Redux Actions",
      difficulty: "easy",
      tags: ["actions", "basics"],
      points: 1,
    },
    {
      id: "redux-junior-6",
      question: "What is a reducer in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A pure function that takes state and action, returns new state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component that renders UI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A middleware function",
          isCorrect: false,
        },
        {
          id: "d",
          text: "An action creator",
          isCorrect: false,
        },
      ],
      explanation:
        "A reducer is a pure function that takes the current state and an action, and returns the new state",
      category: "Redux Reducers",
      difficulty: "easy",
      tags: ["reducers", "pure-functions"],
      points: 1,
    },
    {
      id: "redux-junior-7",
      question: "What does 'single source of truth' mean in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "There is only one store for the entire application",
          isCorrect: true,
        },
        {
          id: "b",
          text: "There is only one reducer",
          isCorrect: false,
        },
        {
          id: "c",
          text: "There is only one action",
          isCorrect: false,
        },
        {
          id: "d",
          text: "There is only one component",
          isCorrect: false,
        },
      ],
      explanation:
        "Single source of truth means the entire application state is stored in one Redux store",
      category: "Redux Principles",
      difficulty: "easy",
      tags: ["principles", "store"],
      points: 1,
    },
    {
      id: "redux-junior-8",
      question: "How do you access state in a React component with Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using useSelector hook",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using useState hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using useEffect hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using useContext hook",
          isCorrect: false,
        },
      ],
      explanation: "useSelector hook is used to access Redux state in React components",
      category: "React-Redux",
      difficulty: "easy",
      tags: ["react-redux", "hooks"],
      points: 1,
    },
    {
      id: "redux-junior-9",
      question: "How do you dispatch actions in a React component with Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using useDispatch hook",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using useState hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using useEffect hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using useCallback hook",
          isCorrect: false,
        },
      ],
      explanation: "useDispatch hook is used to dispatch actions in React components",
      category: "React-Redux",
      difficulty: "easy",
      tags: ["react-redux", "hooks"],
      points: 1,
    },
    {
      id: "redux-junior-10",
      question: "What is the purpose of action creators?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create action objects in a consistent way",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To modify state directly",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To render components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation:
        "Action creators are functions that create and return action objects in a consistent way",
      category: "Redux Actions",
      difficulty: "easy",
      tags: ["actions", "action-creators"],
      points: 1,
    },
    {
      id: "redux-junior-11",
      question: "What is Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "An official package that simplifies Redux usage",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A UI library",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Toolkit is the official package that provides utilities to simplify Redux usage",
      category: "Redux Toolkit",
      difficulty: "easy",
      tags: ["redux-toolkit", "utilities"],
      points: 1,
    },
    {
      id: "redux-junior-12",
      question: "What is createSlice in Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A function that generates reducers and actions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A store",
          isCorrect: false,
        },
      ],
      explanation: "createSlice generates reducer functions and action creators automatically",
      category: "Redux Toolkit",
      difficulty: "easy",
      tags: ["redux-toolkit", "createSlice"],
      points: 1,
    },
    {
      id: "redux-junior-13",
      question: "What is configureStore in Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A function that sets up the Redux store with good defaults",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A reducer",
          isCorrect: false,
        },
        {
          id: "c",
          text: "An action",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A component",
          isCorrect: false,
        },
      ],
      explanation: "configureStore sets up the Redux store with good defaults and middleware",
      category: "Redux Toolkit",
      difficulty: "easy",
      tags: ["redux-toolkit", "configureStore"],
      points: 1,
    },
    {
      id: "redux-junior-14",
      question: "What is immutability in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "State cannot be changed directly, only replaced",
          isCorrect: true,
        },
        {
          id: "b",
          text: "State can be changed directly",
          isCorrect: false,
        },
        {
          id: "c",
          text: "State is always null",
          isCorrect: false,
        },
        {
          id: "d",
          text: "State is always undefined",
          isCorrect: false,
        },
      ],
      explanation:
        "Immutability means state cannot be changed directly, only replaced with new state",
      category: "Redux Principles",
      difficulty: "easy",
      tags: ["immutability", "principles"],
      points: 1,
    },
    {
      id: "redux-junior-15",
      question: "What is the Redux DevTools extension used for?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Debugging Redux applications",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Building applications",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux DevTools extension is used for debugging Redux applications and time-travel debugging",
      category: "Redux DevTools",
      difficulty: "easy",
      tags: ["devtools", "debugging"],
      points: 1,
    },
    {
      id: "redux-junior-16",
      question: "What is time-travel debugging in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "The ability to replay actions and see state changes over time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Moving through time in the application",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Changing the system clock",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Reversing the application flow",
          isCorrect: false,
        },
      ],
      explanation:
        "Time-travel debugging allows you to replay actions and see how state changes over time",
      category: "Redux DevTools",
      difficulty: "easy",
      tags: ["devtools", "time-travel"],
      points: 1,
    },
    {
      id: "redux-junior-17",
      question: "What is a selector in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A function that extracts specific data from state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "c",
          text: "An action",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A reducer",
          isCorrect: false,
        },
      ],
      explanation: "A selector is a function that extracts specific data from the Redux state",
      category: "Redux Selectors",
      difficulty: "easy",
      tags: ["selectors", "state-access"],
      points: 1,
    },
    {
      id: "redux-junior-18",
      question: "What is the purpose of middleware in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and extend Redux functionality",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace reducers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the store",
          isCorrect: false,
        },
      ],
      explanation:
        "Middleware extends Redux functionality and handles side effects like async operations",
      category: "Redux Middleware",
      difficulty: "easy",
      tags: ["middleware", "side-effects"],
      points: 1,
    },
    {
      id: "redux-junior-19",
      question: "What is Redux Thunk?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A middleware that allows action creators to return functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A reducer",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A store",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Thunk is middleware that allows action creators to return functions instead of action objects",
      category: "Redux Middleware",
      difficulty: "easy",
      tags: ["redux-thunk", "async-actions"],
      points: 1,
    },
    {
      id: "redux-junior-20",
      question: "What is the difference between mapStateToProps and useSelector?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "mapStateToProps is for class components, useSelector is for functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "mapStateToProps is for functional components, useSelector is for class components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "They are both deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "mapStateToProps is used with class components, while useSelector is used with functional components",
      category: "React-Redux",
      difficulty: "easy",
      tags: ["react-redux", "hooks", "class-components"],
      points: 1,
    },
    {
      id: "redux-junior-21",
      question: "What is the difference between mapDispatchToProps and useDispatch?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "mapDispatchToProps is for class components, useDispatch is for functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "mapDispatchToProps is for functional components, useDispatch is for class components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "They are both deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "mapDispatchToProps is used with class components, while useDispatch is used with functional components",
      category: "React-Redux",
      difficulty: "easy",
      tags: ["react-redux", "hooks", "class-components"],
      points: 1,
    },
    {
      id: "redux-junior-22",
      question: "What is the Provider component in React-Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A component that makes the Redux store available to child components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component that renders UI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component that handles routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A component that manages forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Provider makes the Redux store available to all child components in the component tree",
      category: "React-Redux",
      difficulty: "easy",
      tags: ["react-redux", "provider"],
      points: 1,
    },
    {
      id: "redux-junior-23",
      question: "What is the purpose of combineReducers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To combine multiple reducers into a single reducer",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To combine multiple stores",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To combine multiple actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To combine multiple components",
          isCorrect: false,
        },
      ],
      explanation: "combineReducers combines multiple reducers into a single reducer function",
      category: "Redux Reducers",
      difficulty: "easy",
      tags: ["reducers", "combineReducers"],
      points: 1,
    },
    {
      id: "redux-junior-24",
      question: "What is the initial state in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "The state that the reducer returns when called with undefined state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "The state after the first action",
          isCorrect: false,
        },
        {
          id: "c",
          text: "The state after the last action",
          isCorrect: false,
        },
        {
          id: "d",
          text: "The state in the middle of the application",
          isCorrect: false,
        },
      ],
      explanation: "Initial state is what the reducer returns when called with undefined state",
      category: "Redux Reducers",
      difficulty: "easy",
      tags: ["reducers", "initial-state"],
      points: 1,
    },
    {
      id: "redux-junior-25",
      question: "What is the purpose of action types in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To identify different types of actions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store data",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To render components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation: "Action types are string constants that identify different types of actions",
      category: "Redux Actions",
      difficulty: "easy",
      tags: ["actions", "action-types"],
      points: 1,
    },
    {
      id: "redux-junior-26",
      question: "What is the purpose of payload in Redux actions?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To carry data associated with the action",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To identify the action type",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store the state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To render components",
          isCorrect: false,
        },
      ],
      explanation: "Payload carries the data associated with the action",
      category: "Redux Actions",
      difficulty: "easy",
      tags: ["actions", "payload"],
      points: 1,
    },
    {
      id: "redux-junior-27",
      question: "What is the purpose of the type property in Redux actions?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To identify what kind of action it is",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store data",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To render components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation: "The type property identifies what kind of action it is",
      category: "Redux Actions",
      difficulty: "easy",
      tags: ["actions", "type"],
      points: 1,
    },
    {
      id: "redux-junior-28",
      question: "What is the purpose of the store.getState() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To get the current state of the store",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To update the state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To subscribe to changes",
          isCorrect: false,
        },
      ],
      explanation: "getState() returns the current state of the Redux store",
      category: "Redux Store",
      difficulty: "easy",
      tags: ["store", "getState"],
      points: 1,
    },
    {
      id: "redux-junior-29",
      question: "What is the purpose of the store.dispatch() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To dispatch actions to the store",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To get the current state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To subscribe to changes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the reducer",
          isCorrect: false,
        },
      ],
      explanation: "dispatch() sends actions to the store to update the state",
      category: "Redux Store",
      difficulty: "easy",
      tags: ["store", "dispatch"],
      points: 1,
    },
    {
      id: "redux-junior-30",
      question: "What is the purpose of the store.subscribe() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To listen for state changes",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To get the current state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the reducer",
          isCorrect: false,
        },
      ],
      explanation: "subscribe() allows you to listen for state changes in the store",
      category: "Redux Store",
      difficulty: "easy",
      tags: ["store", "subscribe"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "redux-intermediate-1",
      question: "What are the three principles of Redux? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Single source of truth",
          isCorrect: true,
        },
        {
          id: "b",
          text: "State is read-only",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Changes are made with pure functions",
          isCorrect: true,
        },
        {
          id: "d",
          text: "State is mutable",
          isCorrect: false,
        },
      ],
      correctAnswers: ["a", "b", "c"],
      explanation:
        "Redux follows three principles: single source of truth, state is read-only, and changes are made with pure functions",
      category: "Redux Principles",
      difficulty: "medium",
      tags: ["principles", "architecture"],
      points: 2,
    },
    {
      id: "redux-intermediate-2",
      question: "What is the purpose of Redux middleware?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and extend Redux functionality",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace reducers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the store",
          isCorrect: false,
        },
      ],
      explanation:
        "Middleware extends Redux functionality and handles side effects like async operations",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["middleware", "side-effects"],
      points: 2,
    },
    {
      id: "redux-intermediate-3",
      question: "What is Redux Thunk used for?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle asynchronous actions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle synchronous actions only",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle UI components",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Thunk allows action creators to return functions instead of action objects, enabling async operations",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-thunk", "async-actions"],
      points: 2,
    },
    {
      id: "redux-intermediate-4",
      question: "What is the purpose of selectors in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To extract and compute derived data from state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To modify state directly",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To render components",
          isCorrect: false,
        },
      ],
      explanation:
        "Selectors extract and compute derived data from the Redux state, helping with performance and code organization",
      category: "Redux Selectors",
      difficulty: "medium",
      tags: ["selectors", "performance"],
      points: 2,
    },
    {
      id: "redux-intermediate-5",
      question: "What is the purpose of combineReducers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To combine multiple reducers into a single reducer",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To combine multiple stores",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To combine multiple actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To combine multiple components",
          isCorrect: false,
        },
      ],
      explanation:
        "combineReducers combines multiple reducers into a single reducer function for the store",
      category: "Redux Reducers",
      difficulty: "medium",
      tags: ["reducers", "combineReducers"],
      points: 2,
    },
    {
      id: "redux-intermediate-6",
      question: "What is the purpose of action creators?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create action objects in a consistent way",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To modify state directly",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To render components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation:
        "Action creators are functions that create and return action objects in a consistent way",
      category: "Redux Actions",
      difficulty: "medium",
      tags: ["actions", "action-creators"],
      points: 2,
    },
    {
      id: "redux-intermediate-7",
      question: "What is the purpose of Redux DevTools?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To debug Redux applications and inspect state changes",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To style components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To test components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To build applications",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux DevTools allows you to debug Redux applications, inspect state changes, and perform time-travel debugging",
      category: "Redux DevTools",
      difficulty: "medium",
      tags: ["devtools", "debugging"],
      points: 2,
    },
    {
      id: "redux-intermediate-8",
      question: "What is the purpose of Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To simplify Redux usage and reduce boilerplate",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To add UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Toolkit provides utilities to simplify Redux usage and reduce boilerplate code",
      category: "Redux Toolkit",
      difficulty: "medium",
      tags: ["redux-toolkit", "utilities"],
      points: 2,
    },
    {
      id: "redux-intermediate-9",
      question: "What is createSlice in Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A function that generates reducers and actions automatically",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A store",
          isCorrect: false,
        },
      ],
      explanation:
        "createSlice generates reducer functions and action creators automatically, reducing boilerplate",
      category: "Redux Toolkit",
      difficulty: "medium",
      tags: ["redux-toolkit", "createSlice"],
      points: 2,
    },
    {
      id: "redux-intermediate-10",
      question: "What is configureStore in Redux Toolkit?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A function that sets up the Redux store with good defaults",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A reducer",
          isCorrect: false,
        },
        {
          id: "c",
          text: "An action",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A component",
          isCorrect: false,
        },
      ],
      explanation: "configureStore sets up the Redux store with good defaults and middleware",
      category: "Redux Toolkit",
      difficulty: "medium",
      tags: ["redux-toolkit", "configureStore"],
      points: 2,
    },
    {
      id: "redux-intermediate-11",
      question: "What is the purpose of immutability in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To ensure predictable state updates and enable time-travel debugging",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To make state changes faster",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To reduce memory usage",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To simplify the code",
          isCorrect: false,
        },
      ],
      explanation:
        "Immutability ensures predictable state updates and enables features like time-travel debugging",
      category: "Redux Principles",
      difficulty: "medium",
      tags: ["immutability", "principles"],
      points: 2,
    },
    {
      id: "redux-intermediate-12",
      question: "What is the purpose of the Provider component in React-Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To make the Redux store available to child components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To render UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Provider makes the Redux store available to all child components in the component tree",
      category: "React-Redux",
      difficulty: "medium",
      tags: ["react-redux", "provider"],
      points: 2,
    },
    {
      id: "redux-intermediate-13",
      question: "What is the purpose of useSelector hook?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access Redux state in functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To modify state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation: "useSelector hook is used to access Redux state in functional components",
      category: "React-Redux",
      difficulty: "medium",
      tags: ["react-redux", "hooks"],
      points: 2,
    },
    {
      id: "redux-intermediate-14",
      question: "What is the purpose of useDispatch hook?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To dispatch actions in functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To access state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To modify state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation: "useDispatch hook is used to dispatch actions in functional components",
      category: "React-Redux",
      difficulty: "medium",
      tags: ["react-redux", "hooks"],
      points: 2,
    },
    {
      id: "redux-intermediate-15",
      question: "What is the purpose of action types in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To identify different types of actions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store data",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To render components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle side effects",
          isCorrect: false,
        },
      ],
      explanation: "Action types are string constants that identify different types of actions",
      category: "Redux Actions",
      difficulty: "medium",
      tags: ["actions", "action-types"],
      points: 2,
    },
    {
      id: "redux-intermediate-16",
      question: "What is the purpose of payload in Redux actions?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To carry data associated with the action",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To identify the action type",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store the state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To render components",
          isCorrect: false,
        },
      ],
      explanation: "Payload carries the data associated with the action",
      category: "Redux Actions",
      difficulty: "medium",
      tags: ["actions", "payload"],
      points: 2,
    },
    {
      id: "redux-intermediate-17",
      question: "What is the purpose of the store.getState() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To get the current state of the store",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To update the state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To subscribe to changes",
          isCorrect: false,
        },
      ],
      explanation: "getState() returns the current state of the Redux store",
      category: "Redux Store",
      difficulty: "medium",
      tags: ["store", "getState"],
      points: 2,
    },
    {
      id: "redux-intermediate-18",
      question: "What is the purpose of the store.dispatch() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To dispatch actions to the store",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To get the current state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To subscribe to changes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the reducer",
          isCorrect: false,
        },
      ],
      explanation: "dispatch() sends actions to the store to update the state",
      category: "Redux Store",
      difficulty: "medium",
      tags: ["store", "dispatch"],
      points: 2,
    },
    {
      id: "redux-intermediate-19",
      question: "What is the purpose of the store.subscribe() method?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To listen for state changes",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To dispatch actions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To get the current state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace the reducer",
          isCorrect: false,
        },
      ],
      explanation: "subscribe() allows you to listen for state changes in the store",
      category: "Redux Store",
      difficulty: "medium",
      tags: ["store", "subscribe"],
      points: 2,
    },
    {
      id: "redux-intermediate-20",
      question: "What is the purpose of initial state in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define the starting state of the application",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To define the final state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To define the middle state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To define the error state",
          isCorrect: false,
        },
      ],
      explanation:
        "Initial state defines the starting state of the application when it first loads",
      category: "Redux Reducers",
      difficulty: "medium",
      tags: ["reducers", "initial-state"],
      points: 2,
    },
    {
      id: "redux-intermediate-21",
      question: "What is the purpose of time-travel debugging in Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To replay actions and see state changes over time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To move through time in the application",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To change the system clock",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To reverse the application flow",
          isCorrect: false,
        },
      ],
      explanation:
        "Time-travel debugging allows you to replay actions and see how state changes over time",
      category: "Redux DevTools",
      difficulty: "medium",
      tags: ["devtools", "time-travel"],
      points: 2,
    },
    {
      id: "redux-intermediate-22",
      question: "What is the purpose of Redux Saga?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects using generator functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Redux Saga is a middleware that handles side effects using generator functions",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-saga", "generators"],
      points: 2,
    },
    {
      id: "redux-intermediate-23",
      question: "What is the purpose of Redux Observable?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects using RxJS observables",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Observable is a middleware that handles side effects using RxJS observables",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-observable", "rxjs"],
      points: 2,
    },
    {
      id: "redux-intermediate-24",
      question: "What is the purpose of Redux Persist?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To persist Redux state to storage",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Redux Persist persists Redux state to storage and rehydrates it on app restart",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-persist", "storage"],
      points: 2,
    },
    {
      id: "redux-intermediate-25",
      question: "What is the purpose of Redux Form?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To manage form state in Redux",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Form manages form state in Redux, providing validation and submission handling",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-form", "forms"],
      points: 2,
    },
    {
      id: "redux-intermediate-26",
      question: "What is the purpose of Redux Logger?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To log actions and state changes to the console",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux Logger logs actions and state changes to the console for debugging purposes",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-logger", "debugging"],
      points: 2,
    },
    {
      id: "redux-intermediate-27",
      question: "What is the purpose of Redux Undo?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To add undo/redo functionality to Redux",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Redux Undo adds undo/redo functionality to Redux applications",
      category: "Redux Middleware",
      difficulty: "medium",
      tags: ["redux-undo", "undo-redo"],
      points: 2,
    },
    {
      id: "redux-intermediate-28",
      question: "What is the purpose of Redux DevTools Extension?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To provide advanced debugging tools for Redux",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux DevTools Extension provides advanced debugging tools for Redux applications",
      category: "Redux DevTools",
      difficulty: "medium",
      tags: ["devtools", "debugging"],
      points: 2,
    },
    {
      id: "redux-intermediate-29",
      question: "What is the purpose of Redux Toolkit Query?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle data fetching and caching in Redux",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Redux Toolkit Query handles data fetching and caching in Redux applications",
      category: "Redux Toolkit",
      difficulty: "medium",
      tags: ["redux-toolkit", "data-fetching"],
      points: 2,
    },
    {
      id: "redux-intermediate-30",
      question: "What is the purpose of Redux Toolkit's createAsyncThunk?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create async action creators with automatic loading states",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Redux entirely",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle UI components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "createAsyncThunk creates async action creators with automatic loading states",
      category: "Redux Toolkit",
      difficulty: "medium",
      tags: ["redux-toolkit", "async-thunk"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "redux-senior-1",
      question: "How would you implement Redux middleware for handling asynchronous actions?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Redux Thunk or Redux Saga",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only reducers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only selectors",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux middleware like Redux Thunk or Redux Saga are used to handle asynchronous actions and side effects.",
      category: "Middleware",
      difficulty: "hard",
      tags: ["middleware", "async", "thunk", "saga"],
      points: 3,
    },
    {
      id: "redux-senior-2",
      question: "What is the purpose of Redux Toolkit's createEntityAdapter?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To manage normalized entity state with CRUD operations",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createEntityAdapter provides CRUD operations for normalized entity state",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "entities"],
      points: 3,
    },
    {
      id: "redux-senior-3",
      question: "What is the purpose of Redux Toolkit's createListenerMiddleware?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and cross-slice communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createListenerMiddleware handles side effects and cross-slice communication",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "listeners"],
      points: 3,
    },
    {
      id: "redux-senior-4",
      question: "What is the purpose of Redux Toolkit's createApi?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create API slices with automatic caching and synchronization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createApi creates API slices with automatic caching and synchronization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "api"],
      points: 3,
    },
    {
      id: "redux-senior-5",
      question: "What is the purpose of Redux Toolkit's createSelector?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create memoized selectors for performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSelector creates memoized selectors for performance optimization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "selectors"],
      points: 3,
    },
    {
      id: "redux-senior-6",
      question: "What is the purpose of Redux Toolkit's createReducer?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers with Immer for immutable updates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createReducer creates reducers with Immer for immutable updates",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "reducers"],
      points: 3,
    },
    {
      id: "redux-senior-7",
      question: "What is the purpose of Redux Toolkit's createAction?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create action creators with type safety",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAction creates action creators with type safety",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "actions"],
      points: 3,
    },
    {
      id: "redux-senior-8",
      question: "What is the purpose of Redux Toolkit's createSlice?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers and actions in one place with less boilerplate",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSlice creates reducers and actions in one place with less boilerplate",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "createSlice"],
      points: 3,
    },
    {
      id: "redux-senior-9",
      question: "What is the purpose of Redux Toolkit's configureStore?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To configure the Redux store with good defaults and middleware",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "configureStore configures the Redux store with good defaults and middleware",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "configureStore"],
      points: 3,
    },
    {
      id: "redux-senior-10",
      question: "What is the purpose of Redux Toolkit's createAsyncThunk?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create async action creators with automatic loading states",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAsyncThunk creates async action creators with automatic loading states",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "async-thunk"],
      points: 3,
    },
    {
      id: "redux-senior-11",
      question: "What is the purpose of Redux Toolkit's createListenerMiddleware?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and cross-slice communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createListenerMiddleware handles side effects and cross-slice communication",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "listeners"],
      points: 3,
    },
    {
      id: "redux-senior-12",
      question: "What is the purpose of Redux Toolkit's createApi?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create API slices with automatic caching and synchronization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createApi creates API slices with automatic caching and synchronization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "api"],
      points: 3,
    },
    {
      id: "redux-senior-13",
      question: "What is the purpose of Redux Toolkit's createSelector?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create memoized selectors for performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSelector creates memoized selectors for performance optimization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "selectors"],
      points: 3,
    },
    {
      id: "redux-senior-14",
      question: "What is the purpose of Redux Toolkit's createReducer?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers with Immer for immutable updates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createReducer creates reducers with Immer for immutable updates",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "reducers"],
      points: 3,
    },
    {
      id: "redux-senior-15",
      question: "What is the purpose of Redux Toolkit's createAction?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create action creators with type safety",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAction creates action creators with type safety",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "actions"],
      points: 3,
    },
    {
      id: "redux-senior-16",
      question: "What is the purpose of Redux Toolkit's createSlice?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers and actions in one place with less boilerplate",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSlice creates reducers and actions in one place with less boilerplate",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "createSlice"],
      points: 3,
    },
    {
      id: "redux-senior-17",
      question: "What is the purpose of Redux Toolkit's configureStore?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To configure the Redux store with good defaults and middleware",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "configureStore configures the Redux store with good defaults and middleware",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "configureStore"],
      points: 3,
    },
    {
      id: "redux-senior-18",
      question: "What is the purpose of Redux Toolkit's createAsyncThunk?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create async action creators with automatic loading states",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAsyncThunk creates async action creators with automatic loading states",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "async-thunk"],
      points: 3,
    },
    {
      id: "redux-senior-19",
      question: "What is the purpose of Redux Toolkit's createListenerMiddleware?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and cross-slice communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createListenerMiddleware handles side effects and cross-slice communication",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "listeners"],
      points: 3,
    },
    {
      id: "redux-senior-20",
      question: "What is the purpose of Redux Toolkit's createApi?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create API slices with automatic caching and synchronization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createApi creates API slices with automatic caching and synchronization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "api"],
      points: 3,
    },
    {
      id: "redux-senior-21",
      question: "What is the purpose of Redux Toolkit's createSelector?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create memoized selectors for performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSelector creates memoized selectors for performance optimization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "selectors"],
      points: 3,
    },
    {
      id: "redux-senior-22",
      question: "What is the purpose of Redux Toolkit's createReducer?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers with Immer for immutable updates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createReducer creates reducers with Immer for immutable updates",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "reducers"],
      points: 3,
    },
    {
      id: "redux-senior-23",
      question: "What is the purpose of Redux Toolkit's createAction?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create action creators with type safety",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAction creates action creators with type safety",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "actions"],
      points: 3,
    },
    {
      id: "redux-senior-24",
      question: "What is the purpose of Redux Toolkit's createSlice?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers and actions in one place with less boilerplate",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSlice creates reducers and actions in one place with less boilerplate",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "createSlice"],
      points: 3,
    },
    {
      id: "redux-senior-25",
      question: "What is the purpose of Redux Toolkit's configureStore?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To configure the Redux store with good defaults and middleware",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "configureStore configures the Redux store with good defaults and middleware",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "configureStore"],
      points: 3,
    },
    {
      id: "redux-senior-26",
      question: "What is the purpose of Redux Toolkit's createAsyncThunk?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create async action creators with automatic loading states",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createAsyncThunk creates async action creators with automatic loading states",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "async-thunk"],
      points: 3,
    },
    {
      id: "redux-senior-27",
      question: "What is the purpose of Redux Toolkit's createListenerMiddleware?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To handle side effects and cross-slice communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createListenerMiddleware handles side effects and cross-slice communication",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "listeners"],
      points: 3,
    },
    {
      id: "redux-senior-28",
      question: "What is the purpose of Redux Toolkit's createApi?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create API slices with automatic caching and synchronization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createApi creates API slices with automatic caching and synchronization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "api"],
      points: 3,
    },
    {
      id: "redux-senior-29",
      question: "What is the purpose of Redux Toolkit's createSelector?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create memoized selectors for performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createSelector creates memoized selectors for performance optimization",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "selectors"],
      points: 3,
    },
    {
      id: "redux-senior-30",
      question: "What is the purpose of Redux Toolkit's createReducer?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reducers with Immer for immutable updates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create UI components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage forms",
          isCorrect: false,
        },
      ],
      explanation: "createReducer creates reducers with Immer for immutable updates",
      category: "Redux Toolkit",
      difficulty: "hard",
      tags: ["redux-toolkit", "reducers"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const RANDOM_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "random-junior-1",
      question: "What is the purpose of version control systems?",
      type: "multiple-choice",
      options: [
        { id: "a", text: "To track changes in code over time", isCorrect: true },
        { id: "b", text: "To compile code", isCorrect: false },
        { id: "c", text: "To run tests", isCorrect: false },
        { id: "d", text: "To deploy applications", isCorrect: false },
      ],
      explanation:
        "Version control systems like Git help track changes in code over time and enable collaboration.",
      category: "Version Control",
      difficulty: "easy",
      tags: ["git", "version-control"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "random-intermediate-1",
      question: "What is the purpose of CI/CD pipelines?",
      type: "multiple-choice",
      options: [
        { id: "a", text: "To automate testing and deployment", isCorrect: true },
        { id: "b", text: "To write code", isCorrect: false },
        { id: "c", text: "To design user interfaces", isCorrect: false },
        { id: "d", text: "To manage databases", isCorrect: false },
      ],
      explanation:
        "CI/CD pipelines automate continuous integration and continuous deployment processes.",
      category: "DevOps",
      difficulty: "medium",
      tags: ["ci-cd", "automation"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "random-senior-1",
      question: "How would you implement a microservices architecture?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By breaking down applications into small, independent services",
          isCorrect: true,
        },
        { id: "b", text: "By using a single large application", isCorrect: false },
        { id: "c", text: "By using only frontend frameworks", isCorrect: false },
        { id: "d", text: "By using only databases", isCorrect: false },
      ],
      explanation:
        "Microservices architecture involves breaking down applications into small, independent services that communicate over networks.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["microservices", "architecture"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const ENHANCED_INTERACTIVE_QUIZ_DATA = {
  angular: ANGULAR_ENHANCED_QUESTIONS,
  react: REACT_ENHANCED_QUESTIONS,
  nextjs: NEXTJS_ENHANCED_QUESTIONS,
  redux: REDUX_ENHANCED_QUESTIONS,
  random: RANDOM_ENHANCED_QUESTIONS,
};
