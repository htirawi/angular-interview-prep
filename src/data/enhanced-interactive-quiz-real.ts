// Enhanced Interactive Quiz Questions
// Generated by qguard - Question Guard Tool
// This file contains all quiz questions for the interactive quiz system

import type { InteractiveQuizQuestion } from "../types/interactive-quiz.js";

export const ANGULAR_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "angular-junior-1",
      question: "What is Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A complete platform for building web applications",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
      ],
      explanation: "Angular is a complete platform for building web applications",
      category: "Angular Basics",
      difficulty: "easy",
      tags: ["basics", "platform"],
      points: 1,
    },
    {
      id: "angular-junior-2",
      question: "Complete the following: Angular uses _____ for two-way data binding.",
      type: "fill-blank",
      correctAnswer: "ngModel",
      explanation: "Angular uses ngModel directive for two-way data binding",
      category: "Data Binding",
      difficulty: "easy",
      tags: ["data-binding", "ngModel"],
      points: 1,
    },
    {
      id: "angular-junior-3",
      question:
        "Which Angular features help with performance optimization? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "OnPush change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Lazy loading",
          isCorrect: true,
        },
        {
          id: "c",
          text: "TrackBy function",
          isCorrect: true,
        },
        {
          id: "d",
          text: "All of the above",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "OnPush change detection",
      category: "Performance",
      difficulty: "easy",
      tags: ["performance", "optimization"],
      points: 1,
    },
    {
      id: "angular-junior-4",
      question: "Angular guards are used to control route access.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular guards are used to control access to routes",
      category: "Routing",
      difficulty: "easy",
      tags: ["guards", "routing", "security"],
      points: 1,
    },
    {
      id: "angular-junior-5",
      question: "What is the difference between Angular services and components?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Services handle UI, components handle business logic",
          isCorrect: false,
        },
        {
          id: "c",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Services are deprecated in Angular",
          isCorrect: false,
        },
      ],
      explanation: "Components handle the UI and user interactions",
      category: "Architecture",
      difficulty: "easy",
      tags: ["components", "services", "architecture"],
      points: 1,
    },
    {
      id: "angular-junior-6",
      question: "Complete: Angular uses ____ for reactive programming.",
      type: "fill-blank",
      correctAnswer: "RxJS",
      explanation:
        "Angular uses RxJS (Reactive Extensions for JavaScript) for reactive programming and handling asynchronous operations.",
      category: "Reactive Programming",
      difficulty: "easy",
      tags: ["rxjs", "reactive", "observables"],
      points: 1,
    },
    {
      id: "angular-junior-7",
      question: "What is dependency injection in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A way to inject CSS into components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A method for database connections",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A deprecated feature",
          isCorrect: false,
        },
      ],
      explanation:
        "Dependency injection is a design pattern where dependencies are provided to a class rather than the class creating them itself.",
      category: "Dependency Injection",
      difficulty: "easy",
      tags: ["dependency-injection", "design-pattern"],
      points: 1,
    },
    {
      id: "angular-junior-8",
      question: "Angular CLI is used for project scaffolding and development tasks.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular CLI (Command Line Interface) is used for creating projects",
      category: "Angular CLI",
      difficulty: "easy",
      tags: ["cli", "tooling", "scaffolding"],
      points: 1,
    },
    {
      id: "angular-junior-9",
      question: "Which decorators are commonly used in Angular? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "@Component",
          isCorrect: true,
        },
        {
          id: "b",
          text: "@Injectable",
          isCorrect: true,
        },
        {
          id: "c",
          text: "@Input",
          isCorrect: true,
        },
        {
          id: "d",
          text: "@Output",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular uses decorators like @Component",
      category: "Decorators",
      difficulty: "easy",
      tags: ["decorators", "metadata"],
      points: 1,
    },
    {
      id: "angular-junior-10",
      question: "Complete: Angular applications are built using ____ architecture.",
      type: "fill-blank",
      correctAnswer: "component-based",
      explanation:
        "Angular applications follow a component-based architecture where the application is built as a tree of components.",
      category: "Architecture",
      difficulty: "easy",
      tags: ["architecture", "components"],
      points: 1,
    },
    {
      id: "angular-junior-11",
      question: "What is the purpose of Angular modules?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To create CSS styles",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage database connections",
          isCorrect: false,
        },
      ],
      explanation: "Angular modules are used to organize related components",
      category: "Modules",
      difficulty: "easy",
      tags: ["modules", "organization"],
      points: 1,
    },
    {
      id: "angular-junior-12",
      question: "Angular supports both template-driven and reactive forms.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular provides both template-driven forms (declarative) and reactive forms (programmatic) for handling user input.",
      category: "Forms",
      difficulty: "easy",
      tags: ["forms", "validation"],
      points: 1,
    },
    {
      id: "angular-junior-13",
      question: "What is the purpose of Angular pipes?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To transform data in templates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create HTTP connections",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component lifecycle",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation: "Angular pipes are used to transform data in templates",
      category: "Pipes",
      difficulty: "easy",
      tags: ["pipes", "data-transformation"],
      points: 1,
    },
    {
      id: "angular-junior-14",
      question: "Complete: Angular uses ____ for styling components.",
      type: "fill-blank",
      correctAnswer: "CSS",
      explanation: "Angular components can be styled using CSS",
      category: "Styling",
      difficulty: "easy",
      tags: ["css", "styling"],
      points: 1,
    },
    {
      id: "angular-junior-15",
      question:
        "Which lifecycle hooks are available in Angular components? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "ngOnInit",
          isCorrect: true,
        },
        {
          id: "b",
          text: "ngOnDestroy",
          isCorrect: true,
        },
        {
          id: "c",
          text: "ngOnChanges",
          isCorrect: true,
        },
        {
          id: "d",
          text: "ngAfterViewInit",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular provides several lifecycle hooks including ngOnInit",
      category: "Lifecycle",
      difficulty: "easy",
      tags: ["lifecycle", "hooks"],
      points: 1,
    },
    {
      id: "angular-junior-16",
      question: "Angular applications are single-page applications (SPAs).",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular applications are typically single-page applications that load once and dynamically update content.",
      category: "SPA",
      difficulty: "easy",
      tags: ["spa", "architecture"],
      points: 1,
    },
    {
      id: "angular-junior-17",
      question: "What is the purpose of Angular directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To extend HTML with custom behavior",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create database tables",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage component state",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular directives are used to extend HTML with custom behavior and functionality.",
      category: "Directives",
      difficulty: "easy",
      tags: ["directives", "html"],
      points: 1,
    },
    {
      id: "angular-junior-18",
      question: "Complete: Angular uses ____ for HTTP requests.",
      type: "fill-blank",
      correctAnswer: "HttpClient",
      explanation: "Angular provides HttpClient service for making HTTP requests to external APIs.",
      category: "HTTP",
      difficulty: "easy",
      tags: ["http", "api"],
      points: 1,
    },
    {
      id: "angular-junior-19",
      question: "Which built-in directives does Angular provide? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "*ngIf",
          isCorrect: true,
        },
        {
          id: "b",
          text: "*ngFor",
          isCorrect: true,
        },
        {
          id: "c",
          text: "*ngSwitch",
          isCorrect: true,
        },
        {
          id: "d",
          text: "*ngStyle",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation:
        "Angular provides several built-in structural and attribute directives like *ngIf",
      category: "Directives",
      difficulty: "easy",
      tags: ["directives", "built-in"],
      points: 1,
    },
    {
      id: "angular-junior-20",
      question: "Angular supports TypeScript by default.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular is built with TypeScript and provides excellent TypeScript support out of the box.",
      category: "TypeScript",
      difficulty: "easy",
      tags: ["typescript", "language"],
      points: 1,
    },
    {
      id: "angular-junior-21",
      question: "What is the purpose of Angular interceptors?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept and modify HTTP requests/responses",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular interceptors are used to intercept and modify HTTP requests and responses globally.",
      category: "Interceptors",
      difficulty: "easy",
      tags: ["interceptors", "http"],
      points: 1,
    },
    {
      id: "angular-junior-22",
      question: "Complete: Angular uses ____ for animations.",
      type: "fill-blank",
      correctAnswer: "Angular Animations",
      explanation:
        "Angular provides a powerful animations API for creating smooth transitions and animations.",
      category: "Animations",
      difficulty: "easy",
      tags: ["animations", "transitions"],
      points: 1,
    },
    {
      id: "angular-junior-23",
      question: "Which testing frameworks does Angular support? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Jasmine",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Karma",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Protractor",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Jest",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular supports various testing frameworks including Jasmine",
      category: "Testing",
      difficulty: "easy",
      tags: ["testing", "frameworks"],
      points: 1,
    },
    {
      id: "angular-junior-24",
      question: "Angular applications can be deployed to various platforms.",
      type: "true-false",
      correctAnswer: "true",
      explanation: "Angular applications can be deployed to web servers",
      category: "Deployment",
      difficulty: "easy",
      tags: ["deployment", "platforms"],
      points: 1,
    },
    {
      id: "angular-junior-25",
      question: "What is the purpose of Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To generate and modify code",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular schematics are code generation tools that help create and modify Angular projects.",
      category: "Schematics",
      difficulty: "easy",
      tags: ["schematics", "code-generation"],
      points: 1,
    },
    {
      id: "angular-junior-26",
      question: "Complete: Angular uses ____ for internationalization.",
      type: "fill-blank",
      correctAnswer: "i18n",
      explanation:
        "Angular provides i18n (internationalization) support for creating multi-language applications.",
      category: "i18n",
      difficulty: "easy",
      tags: ["i18n", "internationalization"],
      points: 1,
    },
    {
      id: "angular-junior-27",
      question: "Which Angular features help with SEO? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Server-side rendering",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Angular Universal",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Meta tags",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Static generation",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Angular provides several features for SEO including server-side rendering",
      category: "SEO",
      difficulty: "easy",
      tags: ["seo", "ssr", "universal"],
      points: 1,
    },
    {
      id: "angular-junior-28",
      question: "Angular supports progressive web app (PWA) features.",
      type: "true-false",
      correctAnswer: "true",
      explanation:
        "Angular provides built-in support for creating progressive web apps with service workers and offline capabilities.",
      category: "PWA",
      difficulty: "easy",
      tags: ["pwa", "offline"],
      points: 1,
    },
    {
      id: "angular-junior-29",
      question: "What is the purpose of Angular elements?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create reusable web components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create animations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular elements allow you to create reusable web components that can be used in any web application.",
      category: "Elements",
      difficulty: "easy",
      tags: ["elements", "web-components"],
      points: 1,
    },
    {
      id: "angular-junior-30",
      question: "Complete: Angular uses ____ for state management.",
      type: "fill-blank",
      correctAnswer: "services",
      explanation: "Angular uses services for state management",
      category: "State Management",
      difficulty: "easy",
      tags: ["state", "services"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "angular-intermediate-1",
      question: "How do you implement lazy loading in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using loadChildren in routing configuration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using ngOnInit hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using @Injectable decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using *ngIf directive",
          isCorrect: false,
        },
      ],
      explanation:
        "Lazy loading is implemented using loadChildren in the routing configuration to load modules on demand.",
      category: "Performance",
      difficulty: "medium",
      tags: ["lazy-loading", "routing", "performance"],
      points: 2,
    },
    {
      id: "angular-intermediate-2",
      question: "What is the difference between Angular services and components?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To manage state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To style components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components handle UI, services handle business logic",
          isCorrect: true,
        },
      ],
      explanation:
        "Components handle the UI and user interactions, while services handle business logic and data management.",
      category: "Architecture",
      difficulty: "medium",
      tags: ["components", "services", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-3",
      question: "What is the difference between Angular pipes and directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Pipes transform data, directives modify DOM",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Pipes modify DOM, directives transform data",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Both only transform data",
          isCorrect: false,
        },
      ],
      explanation:
        "Pipes are used to transform data in templates, while directives are used to modify the DOM structure and behavior.",
      category: "Directives & Pipes",
      difficulty: "medium",
      tags: ["pipes", "directives", "dom"],
      points: 2,
    },
    {
      id: "angular-intermediate-4",
      question: "How do you handle HTTP errors in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using catchError operator with RxJS",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using try-catch blocks",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using error boundaries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using global error handlers only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular uses RxJS operators like catchError to handle HTTP errors in a reactive way.",
      category: "HTTP",
      difficulty: "medium",
      tags: ["http", "error-handling", "rxjs"],
      points: 2,
    },
    {
      id: "angular-intermediate-5",
      question: "What is the purpose of Angular interceptors?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept and modify HTTP requests/responses",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Interceptors are used to intercept and modify HTTP requests and responses globally.",
      category: "HTTP",
      difficulty: "medium",
      tags: ["interceptors", "http", "middleware"],
      points: 2,
    },
    {
      id: "angular-intermediate-6",
      question: "How do you implement custom validators in Angular forms?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating functions that return ValidatorFn",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending FormControl",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using built-in validators only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying the form directly",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom validators are functions that return a ValidatorFn, which is used to validate form controls.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "validation", "custom-validators"],
      points: 2,
    },
    {
      id: "angular-intermediate-7",
      question: "What is the difference between Angular services and providers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Services are classes, providers are configuration objects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Services are providers, providers are services",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Services are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Services are classes that contain business logic, while providers are configuration objects that tell Angular how to create and inject services.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["services", "providers", "dependency-injection"],
      points: 2,
    },
    {
      id: "angular-intermediate-8",
      question: "How do you implement route guards in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing CanActivate, CanDeactivate, etc. interfaces",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By using middleware",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By modifying routes directly",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By using interceptors",
          isCorrect: false,
        },
      ],
      explanation:
        "Route guards are implemented by creating classes that implement interfaces like CanActivate, CanDeactivate, etc.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "guards", "security"],
      points: 2,
    },
    {
      id: "angular-intermediate-9",
      question: "What is the purpose of Angular resolvers?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To pre-fetch data before route activation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle form validation",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
      ],
      explanation:
        "Resolvers are used to pre-fetch data before a route is activated, ensuring data is available when the component loads.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "resolvers", "data-fetching"],
      points: 2,
    },
    {
      id: "angular-intermediate-10",
      question: "How do you implement state management in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using services with RxJS subjects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only component state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using Redux only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using localStorage only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular state management is typically implemented using services with RxJS subjects like BehaviorSubject or ReplaySubject.",
      category: "State Management",
      difficulty: "medium",
      tags: ["state-management", "rxjs", "services"],
      points: 2,
    },
    {
      id: "angular-intermediate-11",
      question: "How do you optimize Angular application performance?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using OnPush change detection, lazy loading, and trackBy functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only OnPush change detection",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only trackBy functions",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular performance optimization involves multiple strategies including OnPush change detection, lazy loading, trackBy functions, and proper memory management.",
      category: "Performance",
      difficulty: "medium",
      tags: ["performance", "optimization", "change-detection"],
      points: 2,
    },
    {
      id: "angular-intermediate-12",
      question: "What is the difference between Angular reactive forms and template-driven forms?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Reactive forms are programmatic, template-driven forms are declarative",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Reactive forms are declarative, template-driven forms are programmatic",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Template-driven forms are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Reactive forms are programmatic and provide more control, while template-driven forms are declarative and easier to set up.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "reactive", "template-driven"],
      points: 2,
    },
    {
      id: "angular-intermediate-13",
      question: "How do you implement custom pipes in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a class that implements PipeTransform interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Pipe class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Pipe decorator only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in pipes",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom pipes are created by implementing the PipeTransform interface and using the @Pipe decorator.",
      category: "Pipes",
      difficulty: "medium",
      tags: ["pipes", "custom", "transformation"],
      points: 2,
    },
    {
      id: "angular-intermediate-14",
      question: "What is the purpose of Angular modules?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To organize and group related functionality",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular modules are used to organize and group related functionality, components, services, and other features.",
      category: "Modules",
      difficulty: "medium",
      tags: ["modules", "organization", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-15",
      question: "How do you handle authentication in Angular applications?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using route guards, interceptors, and JWT tokens",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only route guards",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only JWT tokens",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular authentication typically involves route guards for protecting routes, interceptors for adding tokens to requests, and JWT tokens for secure communication.",
      category: "Security",
      difficulty: "medium",
      tags: ["authentication", "security", "guards"],
      points: 2,
    },
    {
      id: "angular-intermediate-16",
      question: "What is the difference between Angular services and factories?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Services are singletons, factories can return different instances",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Factories are singletons, services can return different instances",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Factories are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Services are typically singletons, while factories can return different instances based on configuration or parameters.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["services", "factories", "dependency-injection"],
      points: 2,
    },
    {
      id: "angular-intermediate-17",
      question: "How do you implement internationalization (i18n) in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular i18n with translation files and locale IDs",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only translation files",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only locale IDs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using third-party libraries only",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular i18n uses translation files, locale IDs, and the built-in i18n tools to support multiple languages.",
      category: "Internationalization",
      difficulty: "medium",
      tags: ["i18n", "internationalization", "localization"],
      points: 2,
    },
    {
      id: "angular-intermediate-18",
      question: "What is the purpose of Angular animations?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To create smooth transitions and enhance user experience",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular animations are used to create smooth transitions, state changes, and enhance the overall user experience.",
      category: "Animations",
      difficulty: "medium",
      tags: ["animations", "transitions", "ux"],
      points: 2,
    },
    {
      id: "angular-intermediate-19",
      question: "How do you implement server-side rendering (SSR) in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular Universal",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using Angular CLI only",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using third-party libraries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "SSR is not supported in Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular Universal is the official solution for implementing server-side rendering in Angular applications.",
      category: "SSR",
      difficulty: "medium",
      tags: ["ssr", "universal", "server-side"],
      points: 2,
    },
    {
      id: "angular-intermediate-20",
      question: "What is the purpose of Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To generate and modify code automatically",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular schematics are code generation tools that help create and modify Angular projects, components, and other code automatically.",
      category: "Tooling",
      difficulty: "medium",
      tags: ["schematics", "code-generation", "tooling"],
      points: 2,
    },
    {
      id: "angular-intermediate-21",
      question: "How do you implement custom directives in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a class with @Directive decorator",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Directive class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Component decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in directives",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom directives are created by defining a class and using the @Directive decorator to specify the selector and behavior.",
      category: "Directives",
      difficulty: "medium",
      tags: ["directives", "custom", "dom-manipulation"],
      points: 2,
    },
    {
      id: "angular-intermediate-22",
      question: "What is the difference between Angular components and directives?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Components have templates, directives modify existing elements",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Directives have templates, components modify existing elements",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Components are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Components have their own templates and create new elements, while directives modify the behavior of existing DOM elements.",
      category: "Architecture",
      difficulty: "medium",
      tags: ["components", "directives", "architecture"],
      points: 2,
    },
    {
      id: "angular-intermediate-23",
      question: "How do you implement error handling in Angular applications?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using global error handlers, HTTP interceptors, and try-catch blocks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only global error handlers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only HTTP interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only try-catch blocks",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular error handling involves multiple layers including global error handlers, HTTP interceptors, and proper try-catch blocks.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["error-handling", "interceptors", "global-handlers"],
      points: 2,
    },
    {
      id: "angular-intermediate-24",
      question: "What is the purpose of Angular testing utilities?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To test components, services, and applications",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular testing utilities provide tools for testing components, services, and entire applications with Jasmine and Karma.",
      category: "Testing",
      difficulty: "medium",
      tags: ["testing", "jasmine", "karma"],
      points: 2,
    },
    {
      id: "angular-intermediate-25",
      question: "How do you implement progressive web app (PWA) features in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular service workers and PWA schematics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only service workers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only PWA schematics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "PWA features are not supported in Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Angular PWA features are implemented using service workers and the PWA schematics to enable offline functionality and app-like experience.",
      category: "PWA",
      difficulty: "medium",
      tags: ["pwa", "service-workers", "offline"],
      points: 2,
    },
    {
      id: "angular-intermediate-26",
      question: "What is the difference between Angular observables and promises?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Observables can emit multiple values, promises resolve once",
          isCorrect: true,
        },
        {
          id: "b",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Promises can emit multiple values, observables resolve once",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Promises are deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "Observables can emit multiple values over time and can be cancelled, while promises resolve with a single value and cannot be cancelled.",
      category: "RxJS",
      difficulty: "medium",
      tags: ["rxjs", "observables", "promises"],
      points: 2,
    },
    {
      id: "angular-intermediate-27",
      question: "How do you implement custom form controls in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing ControlValueAccessor interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending FormControl",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Component decorator only",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in form controls",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom form controls are created by implementing the ControlValueAccessor interface to integrate with Angular's reactive forms.",
      category: "Forms",
      difficulty: "medium",
      tags: ["forms", "custom-controls", "control-value-accessor"],
      points: 2,
    },
    {
      id: "angular-intermediate-28",
      question: "What is the purpose of Angular dependency injection tokens?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To provide type-safe dependency injection for non-class dependencies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Dependency injection tokens are used to provide type-safe injection for non-class dependencies like strings, functions, or objects.",
      category: "Dependency Injection",
      difficulty: "medium",
      tags: ["dependency-injection", "tokens", "type-safety"],
      points: 2,
    },
    {
      id: "angular-intermediate-29",
      question: "How do you implement custom decorators in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating functions that return decorator functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending the Decorator class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using the @Decorator decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying built-in decorators",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom decorators are created by defining functions that return decorator functions, which can modify classes, methods, or properties.",
      category: "Decorators",
      difficulty: "medium",
      tags: ["decorators", "custom", "metadata"],
      points: 2,
    },
    {
      id: "angular-intermediate-30",
      question: "What is the purpose of Angular zone.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To track asynchronous operations and trigger change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To handle HTTP requests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To handle routing",
          isCorrect: false,
        },
      ],
      explanation:
        "Zone.js is used by Angular to track asynchronous operations and automatically trigger change detection when needed.",
      category: "Change Detection",
      difficulty: "medium",
      tags: ["zone.js", "change-detection", "async"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "angular-senior-1",
      question: "How would you implement a custom change detection strategy in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By implementing ChangeDetectionStrategy interface",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By extending Component class",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using @Injectable decorator",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By modifying Angular core",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom change detection strategies are implemented by creating classes that implement the ChangeDetectionStrategy interface.",
      category: "Advanced",
      difficulty: "hard",
      tags: ["change-detection", "performance", "advanced"],
      points: 3,
    },
    {
      id: "angular-senior-2",
      question: "How would you implement a micro-frontend architecture with Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Module Federation, single-spa, or Angular Elements",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Angular CLI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Angular Modules",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Micro-frontends are not possible with Angular",
          isCorrect: false,
        },
      ],
      explanation:
        "Micro-frontend architecture in Angular can be implemented using Module Federation, single-spa framework, or Angular Elements for web components.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["micro-frontends", "architecture", "module-federation"],
      points: 3,
    },
    {
      id: "angular-senior-3",
      question: "How would you optimize Angular application bundle size?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using tree-shaking, lazy loading, and bundle analysis",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only tree-shaking",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only bundle analysis",
          isCorrect: false,
        },
      ],
      explanation:
        "Bundle size optimization involves tree-shaking unused code, lazy loading modules, and using bundle analysis tools to identify optimization opportunities.",
      category: "Performance",
      difficulty: "hard",
      tags: ["bundle-optimization", "tree-shaking", "lazy-loading"],
      points: 3,
    },
    {
      id: "angular-senior-4",
      question: "How would you implement advanced state management patterns in Angular?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using NgRx, Akita, or custom RxJS patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only services",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only component state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only localStorage",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced state management in Angular can be implemented using NgRx for Redux patterns, Akita for simpler state management, or custom RxJS patterns.",
      category: "State Management",
      difficulty: "hard",
      tags: ["state-management", "ngrx", "akita", "rxjs"],
      points: 3,
    },
    {
      id: "angular-senior-5",
      question: "How would you implement custom Angular schematics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating a library with custom rules and templates",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By modifying Angular CLI",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By using only built-in schematics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Custom schematics are not supported",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom Angular schematics are created by building a library that defines custom rules and templates for code generation.",
      category: "Tooling",
      difficulty: "hard",
      tags: ["schematics", "code-generation", "custom-tools"],
      points: 3,
    },
    {
      id: "angular-senior-6",
      question: "How would you implement advanced Angular testing strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using TestBed, mocking, and integration testing patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unit tests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only integration tests",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only e2e tests",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular testing involves using TestBed for component testing, proper mocking strategies, and integration testing patterns.",
      category: "Testing",
      difficulty: "hard",
      tags: ["testing", "testbed", "mocking", "integration"],
      points: 3,
    },
    {
      id: "angular-senior-7",
      question: "How would you implement advanced Angular security measures?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using CSP, XSS protection, and secure authentication patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only CSP",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only XSS protection",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only authentication",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular security involves Content Security Policy (CSP), XSS protection, secure authentication patterns, and input sanitization.",
      category: "Security",
      difficulty: "hard",
      tags: ["security", "csp", "xss", "authentication"],
      points: 3,
    },
    {
      id: "angular-senior-8",
      question: "How would you implement advanced Angular performance monitoring?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Angular DevTools, performance APIs, and custom metrics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Angular DevTools",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only performance APIs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only custom metrics",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced performance monitoring in Angular involves using Angular DevTools, Performance APIs, and custom metrics to track application performance.",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "monitoring", "devtools", "metrics"],
      points: 3,
    },
    {
      id: "angular-senior-9",
      question: "How would you implement advanced Angular deployment strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using CI/CD pipelines, environment configurations, and deployment automation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only manual deployment",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CI/CD pipelines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only environment configurations",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced deployment strategies involve CI/CD pipelines, environment-specific configurations, and automated deployment processes.",
      category: "Deployment",
      difficulty: "hard",
      tags: ["deployment", "ci-cd", "automation", "environments"],
      points: 3,
    },
    {
      id: "angular-senior-10",
      question: "How would you implement advanced Angular accessibility features?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using ARIA attributes, keyboard navigation, and screen reader support",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only ARIA attributes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only keyboard navigation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only screen reader support",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced accessibility in Angular involves proper ARIA attributes, keyboard navigation support, and screen reader compatibility.",
      category: "Accessibility",
      difficulty: "hard",
      tags: ["accessibility", "aria", "keyboard", "screen-readers"],
      points: 3,
    },
    {
      id: "angular-senior-11",
      question: "How would you implement advanced Angular error handling and logging?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using global error handlers, structured logging, and error tracking services",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only global error handlers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only structured logging",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only error tracking services",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced error handling involves global error handlers, structured logging systems, and integration with error tracking services like Sentry.",
      category: "Error Handling",
      difficulty: "hard",
      tags: ["error-handling", "logging", "monitoring", "tracking"],
      points: 3,
    },
    {
      id: "angular-senior-12",
      question: "How would you implement advanced Angular internationalization?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using dynamic locale loading, pluralization, and advanced translation features",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only static translations",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only dynamic locale loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only pluralization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced i18n in Angular involves dynamic locale loading, pluralization rules, and advanced translation features for complex applications.",
      category: "Internationalization",
      difficulty: "hard",
      tags: ["i18n", "dynamic-loading", "pluralization", "translations"],
      points: 3,
    },
    {
      id: "angular-senior-13",
      question: "How would you implement advanced Angular animation techniques?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using complex state transitions, keyframe animations, and animation callbacks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only simple transitions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only keyframe animations",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only animation callbacks",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced Angular animations involve complex state transitions, keyframe animations, and animation callbacks for sophisticated user experiences.",
      category: "Animations",
      difficulty: "hard",
      tags: ["animations", "transitions", "keyframes", "callbacks"],
      points: 3,
    },
    {
      id: "angular-senior-14",
      question: "How would you implement advanced Angular form validation patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using async validators, cross-field validation, and custom validation strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only sync validators",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only async validators",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only cross-field validation",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced form validation involves async validators, cross-field validation, and custom validation strategies for complex form scenarios.",
      category: "Forms",
      difficulty: "hard",
      tags: ["forms", "validation", "async", "cross-field"],
      points: 3,
    },
    {
      id: "angular-senior-15",
      question: "How would you implement advanced Angular routing patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using route resolvers, guards, and dynamic route configuration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only route resolvers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only guards",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced routing patterns involve route resolvers for data pre-loading, guards for route protection, and dynamic route configuration.",
      category: "Routing",
      difficulty: "hard",
      tags: ["routing", "resolvers", "guards", "dynamic"],
      points: 3,
    },
    {
      id: "angular-senior-16",
      question: "How would you implement advanced Angular HTTP patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using interceptors, retry logic, and advanced error handling",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic HTTP calls",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only interceptors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only retry logic",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced HTTP patterns involve interceptors for request/response handling, retry logic for failed requests, and sophisticated error handling.",
      category: "HTTP",
      difficulty: "hard",
      tags: ["http", "interceptors", "retry", "error-handling"],
      points: 3,
    },
    {
      id: "angular-senior-17",
      question: "How would you implement advanced Angular dependency injection patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using hierarchical injection, custom providers, and injection tokens",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic injection",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only hierarchical injection",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only custom providers",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced DI patterns involve hierarchical injection scopes, custom providers, and injection tokens for complex dependency scenarios.",
      category: "Dependency Injection",
      difficulty: "hard",
      tags: ["dependency-injection", "hierarchical", "providers", "tokens"],
      points: 3,
    },
    {
      id: "angular-senior-18",
      question: "How would you implement advanced Angular component communication patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using services, observables, and advanced event patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only @Input/@Output",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only services",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only observables",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced component communication involves services for shared state, observables for reactive communication, and sophisticated event patterns.",
      category: "Component Communication",
      difficulty: "hard",
      tags: ["communication", "services", "observables", "events"],
      points: 3,
    },
    {
      id: "angular-senior-19",
      question: "How would you implement advanced Angular lifecycle management?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using lifecycle hooks, cleanup patterns, and memory management",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic lifecycle hooks",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only cleanup patterns",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only memory management",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced lifecycle management involves proper use of lifecycle hooks, cleanup patterns, and memory management to prevent leaks.",
      category: "Lifecycle",
      difficulty: "hard",
      tags: ["lifecycle", "cleanup", "memory", "hooks"],
      points: 3,
    },
    {
      id: "angular-senior-20",
      question: "How would you implement advanced Angular testing patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using test doubles, integration testing, and advanced mocking strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unit tests",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only test doubles",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only integration testing",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced testing patterns involve test doubles, comprehensive integration testing, and sophisticated mocking strategies for complex scenarios.",
      category: "Testing",
      difficulty: "hard",
      tags: ["testing", "test-doubles", "integration", "mocking"],
      points: 3,
    },
    {
      id: "angular-senior-21",
      question: "How would you implement advanced Angular performance optimization techniques?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using virtual scrolling, OnPush strategy, and advanced change detection",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only virtual scrolling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only OnPush strategy",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic change detection",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced performance optimization involves virtual scrolling for large lists, OnPush change detection strategy, and sophisticated change detection patterns.",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "virtual-scrolling", "onpush", "change-detection"],
      points: 3,
    },
    {
      id: "angular-senior-22",
      question: "How would you implement advanced Angular security patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using sanitization, CSP headers, and secure coding practices",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic sanitization",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CSP headers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only secure coding",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced security patterns involve proper input sanitization, Content Security Policy headers, and secure coding practices to prevent vulnerabilities.",
      category: "Security",
      difficulty: "hard",
      tags: ["security", "sanitization", "csp", "secure-coding"],
      points: 3,
    },
    {
      id: "angular-senior-23",
      question: "How would you implement advanced Angular build optimization?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using webpack optimization, code splitting, and advanced bundling strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only basic webpack",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only code splitting",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic bundling",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced build optimization involves webpack configuration, intelligent code splitting, and sophisticated bundling strategies for optimal performance.",
      category: "Build Optimization",
      difficulty: "hard",
      tags: ["build", "webpack", "code-splitting", "bundling"],
      points: 3,
    },
    {
      id: "angular-senior-24",
      question: "How would you implement advanced Angular monitoring and analytics?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using performance monitoring, user analytics, and error tracking",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only performance monitoring",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only user analytics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only error tracking",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced monitoring involves performance tracking, user behavior analytics, and comprehensive error tracking for production applications.",
      category: "Monitoring",
      difficulty: "hard",
      tags: ["monitoring", "analytics", "performance", "error-tracking"],
      points: 3,
    },
    {
      id: "angular-senior-25",
      question: "How would you implement advanced Angular deployment and DevOps practices?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using containerization, CI/CD pipelines, and infrastructure as code",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only containerization",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CI/CD pipelines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only infrastructure as code",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced DevOps practices involve containerization with Docker, sophisticated CI/CD pipelines, and infrastructure as code for scalable deployments.",
      category: "DevOps",
      difficulty: "hard",
      tags: ["devops", "containerization", "ci-cd", "infrastructure"],
      points: 3,
    },
    {
      id: "angular-senior-26",
      question: "How would you implement advanced Angular scalability patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using micro-frontends, lazy loading, and distributed architecture",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only micro-frontends",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only lazy loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only distributed architecture",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced scalability patterns involve micro-frontend architecture, intelligent lazy loading, and distributed system design for large-scale applications.",
      category: "Scalability",
      difficulty: "hard",
      tags: ["scalability", "micro-frontends", "lazy-loading", "distributed"],
      points: 3,
    },
    {
      id: "angular-senior-27",
      question: "How would you implement advanced Angular code organization patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using feature modules, barrel exports, and architectural patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only feature modules",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only barrel exports",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only basic modules",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced code organization involves feature modules, barrel exports for clean imports, and established architectural patterns like Clean Architecture.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["architecture", "feature-modules", "barrel-exports", "organization"],
      points: 3,
    },
    {
      id: "angular-senior-28",
      question: "How would you implement advanced Angular data flow patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using unidirectional data flow, state management, and reactive patterns",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only unidirectional data flow",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only state management",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only reactive patterns",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced data flow patterns involve unidirectional data flow, sophisticated state management, and reactive programming patterns for complex applications.",
      category: "Data Flow",
      difficulty: "hard",
      tags: ["data-flow", "state-management", "reactive", "unidirectional"],
      points: 3,
    },
    {
      id: "angular-senior-29",
      question: "How would you implement advanced Angular integration patterns?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using API integration, third-party libraries, and service integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only API integration",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only third-party libraries",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only service integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced integration patterns involve robust API integration, seamless third-party library integration, and sophisticated service integration patterns.",
      category: "Integration",
      difficulty: "hard",
      tags: ["integration", "api", "third-party", "services"],
      points: 3,
    },
    {
      id: "angular-senior-30",
      question: "How would you implement advanced Angular maintenance and evolution strategies?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using versioning strategies, migration patterns, and legacy system integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only versioning strategies",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only migration patterns",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only legacy integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced maintenance strategies involve versioning strategies, migration patterns for framework updates, and integration with legacy systems.",
      category: "Maintenance",
      difficulty: "hard",
      tags: ["maintenance", "versioning", "migration", "legacy"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const REACT_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "react-junior-1",
      question: "What is React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library for building user interfaces",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A complete framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
      ],
      explanation: "React is a JavaScript library for building user interfaces",
      category: "React Basics",
      difficulty: "easy",
      tags: ["basics", "library"],
      points: 1,
    },
    {
      id: "react-junior-11",
      question: "What are React hooks?",
      type: "multiple-choice",
      explanation:
        "Hooks are functions that let you use state and lifecycle features in functional components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "functional"],
      points: 1,
    },
    {
      id: "react-junior-12",
      question: "Which hook is used to manage state in functional components?",
      type: "multiple-choice",
      explanation: "useState is the hook used to manage state in functional components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "state"],
      points: 1,
    },
    {
      id: "react-junior-13",
      question: "What is the purpose of useEffect?",
      type: "multiple-choice",
      explanation: "useEffect is used to perform side effects like data fetching",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "side-effects"],
      points: 1,
    },
    {
      id: "react-junior-14",
      question: "React components must return a single _____ element.",
      type: "fill-blank",
      correctAnswer: "JSX",
      explanation: "React components must return a single JSX element (or React Fragment).",
      category: "JSX",
      difficulty: "easy",
      tags: ["jsx", "return"],
      points: 1,
    },
    {
      id: "react-junior-15",
      question: "What is the difference between props and state?",
      type: "multiple-choice",
      explanation: "Props are read-only and passed from parent components",
      category: "Props vs State",
      difficulty: "easy",
      tags: ["props", "state", "differences"],
      points: 1,
    },
    {
      id: "react-junior-16",
      question: "What is the purpose of React.Fragment?",
      type: "multiple-choice",
      explanation:
        "React.Fragment allows you to group multiple elements without adding extra DOM nodes.",
      category: "Fragment",
      difficulty: "easy",
      tags: ["fragment", "dom"],
      points: 1,
    },
    {
      id: "react-junior-17",
      question: "Which method is called when a component is first rendered?",
      type: "multiple-choice",
      explanation: "componentDidMount is called after a component is rendered for the first time.",
      category: "Lifecycle",
      difficulty: "easy",
      tags: ["lifecycle", "mount"],
      points: 1,
    },
    {
      id: "react-junior-18",
      question: "What is the purpose of React Developer Tools?",
      type: "multiple-choice",
      explanation:
        "React Developer Tools is a browser extension for debugging and inspecting React components.",
      category: "Development Tools",
      difficulty: "easy",
      tags: ["devtools", "debugging"],
      points: 1,
    },
    {
      id: "react-junior-19",
      question: "React uses _____ to optimize rendering performance.",
      type: "fill-blank",
      correctAnswer: "Virtual DOM",
      explanation:
        "React uses the Virtual DOM to optimize rendering performance by minimizing DOM updates.",
      category: "Performance",
      difficulty: "easy",
      tags: ["virtual-dom", "performance"],
      points: 1,
    },
    {
      id: "react-junior-20",
      question: "What is the purpose of React Router?",
      type: "multiple-choice",
      explanation:
        "React Router is a library for handling navigation and routing in single-page applications.",
      category: "Routing",
      difficulty: "easy",
      tags: ["routing", "navigation"],
      points: 1,
    },
    {
      id: "react-junior-21",
      question: "What is the purpose of React Context?",
      type: "multiple-choice",
      explanation:
        "React Context allows you to share data between components without prop drilling.",
      category: "Context",
      difficulty: "easy",
      tags: ["context", "data-sharing"],
      points: 1,
    },
    {
      id: "react-junior-22",
      question: "What is the purpose of React.memo?",
      type: "multiple-choice",
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the result.",
      category: "Performance",
      difficulty: "easy",
      tags: ["memo", "performance"],
      points: 1,
    },
    {
      id: "react-junior-23",
      question: "What is the purpose of useCallback?",
      type: "multiple-choice",
      explanation:
        "useCallback is a hook that memoizes functions to prevent unnecessary re-renders of child components.",
      category: "Performance",
      difficulty: "easy",
      tags: ["callback", "performance"],
      points: 1,
    },
    {
      id: "react-junior-24",
      question: "What is the purpose of useMemo?",
      type: "multiple-choice",
      explanation:
        "useMemo is a hook that memoizes expensive calculations to avoid recalculating on every render.",
      category: "Performance",
      difficulty: "easy",
      tags: ["memo", "performance"],
      points: 1,
    },
    {
      id: "react-junior-25",
      question: "What is the purpose of React.StrictMode?",
      type: "multiple-choice",
      explanation:
        "React.StrictMode is a tool for highlighting potential problems in development mode.",
      category: "Development",
      difficulty: "easy",
      tags: ["strict-mode", "development"],
      points: 1,
    },
    {
      id: "react-junior-26",
      question: "What is the purpose of React.PureComponent?",
      type: "multiple-choice",
      explanation:
        "React.PureComponent automatically implements shouldComponentUpdate with a shallow prop and state comparison.",
      category: "Performance",
      difficulty: "easy",
      tags: ["pure-component", "performance"],
      points: 1,
    },
    {
      id: "react-junior-27",
      question: "What is the purpose of React.lazy?",
      type: "multiple-choice",
      explanation: "React.lazy allows you to lazy load components",
      category: "Performance",
      difficulty: "easy",
      tags: ["lazy", "performance"],
      points: 1,
    },
    {
      id: "react-junior-28",
      question: "What is the purpose of React.Suspense?",
      type: "multiple-choice",
      explanation: "React.Suspense allows you to handle loading states for lazy-loaded components.",
      category: "Performance",
      difficulty: "easy",
      tags: ["suspense", "loading"],
      points: 1,
    },
    {
      id: "react-junior-29",
      question: "What is the purpose of React.ErrorBoundary?",
      type: "multiple-choice",
      explanation:
        "Error boundaries catch JavaScript errors anywhere in the component tree and display fallback UI.",
      category: "Error Handling",
      difficulty: "easy",
      tags: ["error-boundary", "error-handling"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "What is the purpose of React.Portal?",
      type: "multiple-choice",
      explanation:
        "React.Portal allows you to render children into a different DOM node outside the parent component.",
      category: "Portal",
      difficulty: "easy",
      tags: ["portal", "dom"],
      points: 1,
    },
    {
      id: "react-junior-22",
      question: "Which of the following describes a controlled component in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A component with styling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component with validation",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A component whose value is controlled by React state",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A component that controls other components",
          isCorrect: false,
        },
      ],
      explanation:
        "Controlled components have their value controlled by React state. This is a core React principle.",
      category: "React Forms",
      difficulty: "easy",
      tags: ["react", "forms", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-23",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Accessing context",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Managing component state",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Optimizing performance",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Handling side effects",
          isCorrect: false,
        },
      ],
      explanation:
        "useState is a Hook that lets you add state to functional components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "easy",
      tags: ["react", "hooks", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-24",
      question: "What is React state? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "External data",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Computed data",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Static data",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Data that can change over time",
          isCorrect: true,
        },
      ],
      explanation:
        "State is data that can change over time and affects what the component renders. This is a core React principle.",
      category: "React State",
      difficulty: "easy",
      tags: ["react", "state", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-25",
      question: "What is a React component?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A CSS class",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A HTML element",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A JavaScript function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A reusable piece of UI",
          isCorrect: true,
        },
      ],
      explanation:
        "React components are reusable pieces of UI that can be composed together. This is a core React principle.",
      category: "React Components",
      difficulty: "easy",
      tags: ["react", "components", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-26",
      question: "Which of the following describes useState used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Handling side effects",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Accessing context",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Managing component state",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Optimizing performance",
          isCorrect: false,
        },
      ],
      explanation:
        "useState is a Hook that lets you add state to functional components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "easy",
      tags: ["react", "hooks", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-28",
      question: "What is React? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A JavaScript library for building user interfaces",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A complete framework like Angular",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS framework",
          isCorrect: false,
        },
      ],
      explanation: "React is a JavaScript library for building user interfaces",
      category: "React Basics",
      difficulty: "easy",
      tags: ["react", "basics", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-29",
      question: "What is useEffect used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling side effects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
      ],
      explanation:
        "useEffect is used to handle side effects like data fetching and subscriptions. This is a core React principle.",
      category: "React Lifecycle",
      difficulty: "easy",
      tags: ["react", "lifecycle", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "Which of the following describes a React component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reusable piece of UI",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A JavaScript function",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A HTML element",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A CSS class",
          isCorrect: false,
        },
      ],
      explanation:
        "React components are reusable pieces of UI that can be composed together. This is a core React principle.",
      category: "React Components",
      difficulty: "easy",
      tags: ["react", "components", "react", "junior"],
      points: 1,
    },
    {
      id: "react-junior-30",
      question: "Which of the following describes useEffect used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling side effects",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
      ],
      explanation:
        "useEffect is used to handle side effects like data fetching and subscriptions. This is a core React principle.",
      category: "React Lifecycle",
      difficulty: "easy",
      tags: ["react", "lifecycle", "react", "junior"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "react-intermediate-1",
      question: "What is the purpose of useEffect hook?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To perform side effects in functional components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To handle events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage routing",
          isCorrect: false,
        },
      ],
      explanation: "useEffect hook is used to perform side effects like data fetching",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "side-effects"],
      points: 2,
    },
    {
      id: "react-intermediate-2",
      question: "What is the purpose of useReducer?",
      type: "multiple-choice",
      explanation: "useReducer is a hook for managing complex state logic with a reducer function.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "reducer"],
      points: 2,
    },
    {
      id: "react-intermediate-3",
      question: "What is the purpose of useContext?",
      type: "multiple-choice",
      explanation:
        "useContext is a hook that allows you to access React context values in functional components.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["hooks", "context"],
      points: 2,
    },
    {
      id: "react-intermediate-4",
      question: "What is the purpose of useMemo?",
      type: "multiple-choice",
      explanation:
        "useMemo is a hook that memoizes expensive calculations to avoid recalculating on every render.",
      category: "Performance",
      difficulty: "medium",
      tags: ["hooks", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-5",
      question: "What is the purpose of useCallback?",
      type: "multiple-choice",
      explanation:
        "useCallback is a hook that memoizes functions to prevent unnecessary re-renders of child components.",
      category: "Performance",
      difficulty: "medium",
      tags: ["hooks", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-6",
      question: "What is the purpose of React.memo?",
      type: "multiple-choice",
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the result.",
      category: "Performance",
      difficulty: "medium",
      tags: ["memo", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-7",
      question: "What is the purpose of React.lazy?",
      type: "multiple-choice",
      explanation: "React.lazy allows you to lazy load components",
      category: "Performance",
      difficulty: "medium",
      tags: ["lazy", "performance"],
      points: 2,
    },
    {
      id: "react-intermediate-8",
      question: "What is the purpose of React.Suspense?",
      type: "multiple-choice",
      explanation: "React.Suspense allows you to handle loading states for lazy-loaded components.",
      category: "Performance",
      difficulty: "medium",
      tags: ["suspense", "loading"],
      points: 2,
    },
    {
      id: "react-intermediate-9",
      question: "What is the purpose of React Context?",
      type: "multiple-choice",
      explanation:
        "React Context allows you to share data between components without prop drilling.",
      category: "Context",
      difficulty: "medium",
      tags: ["context", "data-sharing"],
      points: 2,
    },
    {
      id: "react-intermediate-10",
      question: "What is the purpose of React Router?",
      type: "multiple-choice",
      explanation:
        "React Router is a library for handling navigation and routing in single-page applications.",
      category: "Routing",
      difficulty: "medium",
      tags: ["routing", "navigation"],
      points: 2,
    },
    {
      id: "react-intermediate-11",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-12",
      question: "What are React Error Boundaries used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Validating forms",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Catching JavaScript errors",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Handling network errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "Error Boundaries catch JavaScript errors anywhere in the component tree. This is a core React principle.",
      category: "React Error Boundaries",
      difficulty: "medium",
      tags: ["react", "error-boundaries", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-13",
      question: "What is the Compound Component pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-14",
      question: "Which of the following describes React Context used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-16",
      question: "What is useRef used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Accessing DOM elements",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "useRef provides a way to access DOM elements and persist values across renders. This is a core React principle.",
      category: "React Refs",
      difficulty: "medium",
      tags: ["react", "refs", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-17",
      question: "What is React Suspense used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling errors",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling loading states",
          isCorrect: true,
        },
      ],
      explanation:
        "React Suspense allows components to wait for something before rendering. This is a core React principle.",
      category: "React Suspense",
      difficulty: "medium",
      tags: ["react", "suspense", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-18",
      question: "Which of the following describes React Suspense used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling errors",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Handling loading states",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "React Suspense allows components to wait for something before rendering. This is a core React principle.",
      category: "React Suspense",
      difficulty: "medium",
      tags: ["react", "suspense", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-20",
      question: "What is a custom hook in React? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A built-in React hook",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A function that uses other hooks",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom hooks are functions that use other hooks and can be reused across components. This is a core React principle.",
      category: "React Custom Hooks",
      difficulty: "medium",
      tags: ["react", "custom-hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-21",
      question: "What is React Context used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-22",
      question: "Which of the following describes React Testing Library used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "E2E testing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Testing user interactions",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Integration testing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Unit testing",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library focuses on testing components from the users perspective. This is a core React principle.",
      category: "React Testing",
      difficulty: "medium",
      tags: ["react", "testing", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-24",
      question: "What is React Testing Library used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Testing user interactions",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Integration testing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "E2E testing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Unit testing",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library focuses on testing components from the users perspective. This is a core React principle.",
      category: "React Testing",
      difficulty: "medium",
      tags: ["react", "testing", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-25",
      question: "What are React Error Boundaries used for?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Catching JavaScript errors",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Handling network errors",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Validating forms",
          isCorrect: false,
        },
      ],
      explanation:
        "Error Boundaries catch JavaScript errors anywhere in the component tree. This is a core React principle.",
      category: "React Error Boundaries",
      difficulty: "medium",
      tags: ["react", "error-boundaries", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-26",
      question: "Which of the following describes the purpose of useCallback?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "To manage component state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "To memoize functions and prevent unnecessary re-renders",
          isCorrect: true,
        },
        {
          id: "c",
          text: "To perform side effects",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To access context values",
          isCorrect: false,
        },
      ],
      explanation:
        "useCallback memoizes functions to prevent unnecessary re-renders of child components. This is a core React principle.",
      category: "React Hooks",
      difficulty: "medium",
      tags: ["react", "hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-28",
      question: "What is React Context used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing local state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing data between components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
      ],
      explanation:
        "React Context provides a way to share data between components without prop drilling. This is a core React principle.",
      category: "React Context",
      difficulty: "medium",
      tags: ["react", "context", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-29",
      question: "What is React.memo used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Preventing unnecessary re-renders",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders. This is a core React principle.",
      category: "React Performance",
      difficulty: "medium",
      tags: ["react", "performance", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-30",
      question: "Which of the following describes React.memo used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Preventing unnecessary re-renders",
          isCorrect: true,
        },
      ],
      explanation:
        "React.memo is a higher-order component that prevents unnecessary re-renders. This is a core React principle.",
      category: "React Performance",
      difficulty: "medium",
      tags: ["react", "performance", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-27",
      question: "What are React Portals used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Handling events",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Rendering children outside the DOM hierarchy",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Managing state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
      ],
      explanation:
        "Portals provide a way to render children into a DOM node outside the parent component. This is a core React principle.",
      category: "React Portals",
      difficulty: "medium",
      tags: ["react", "portals", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-28",
      question: "What is the Compound Component pattern? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-29",
      question: "What is a custom hook in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A component",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A built-in React hook",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A function that uses other hooks",
          isCorrect: true,
        },
      ],
      explanation:
        "Custom hooks are functions that use other hooks and can be reused across components. This is a core React principle.",
      category: "React Custom Hooks",
      difficulty: "medium",
      tags: ["react", "custom-hooks", "react", "intermediate"],
      points: 2,
    },
    {
      id: "react-intermediate-30",
      question: "Which of the following describes the Compound Component pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "A hook",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A utility function",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that work together",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A single component",
          isCorrect: false,
        },
      ],
      explanation:
        "Compound components are components that work together to provide functionality. This is a core React principle.",
      category: "React Patterns",
      difficulty: "medium",
      tags: ["react", "patterns", "react", "intermediate"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "react-senior-1",
      question: "How would you optimize a React application with performance issues?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Use only class components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Remove all hooks",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Use only functional components",
          isCorrect: false,
        },
      ],
      explanation: "React performance optimization involves using React.memo",
      category: "Performance",
      difficulty: "hard",
      tags: ["performance", "optimization", "memoization"],
      points: 3,
    },
    {
      id: "react-senior-2",
      question: "How would you implement a custom hook for data fetching?",
      type: "multiple-choice",
      explanation:
        "Custom hooks for data fetching typically use useState to manage data/loading/error states and useEffect for the actual fetching with proper cleanup.",
      category: "Custom Hooks",
      difficulty: "hard",
      tags: ["hooks", "data-fetching", "custom"],
      points: 3,
    },
    {
      id: "react-senior-3",
      question: "What is the purpose of useLayoutEffect?",
      type: "multiple-choice",
      explanation:
        "useLayoutEffect runs synchronously after all DOM mutations but before the browser paints",
      category: "Hooks",
      difficulty: "hard",
      tags: ["hooks", "dom", "performance"],
      points: 3,
    },
    {
      id: "react-senior-5",
      question: "What is the purpose of React Concurrent Features?",
      type: "multiple-choice",
      explanation: "React Concurrent Features enable interruptible rendering",
      category: "Concurrent Features",
      difficulty: "hard",
      tags: ["concurrent", "rendering", "performance"],
      points: 3,
    },
    {
      id: "react-senior-6",
      question: "What is the purpose of React Server Components?",
      type: "multiple-choice",
      explanation: "React Server Components allow rendering components on the server",
      category: "Server Components",
      difficulty: "hard",
      tags: ["server-components", "performance"],
      points: 3,
    },
    {
      id: "react-senior-6",
      question: "Which of the following describes React Fiber?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reconciliation algorithm",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
      ],
      explanation:
        "React Fiber is the reconciliation algorithm that powers Reacts rendering. This is a core React principle.",
      category: "React Fiber",
      difficulty: "hard",
      tags: ["react", "fiber", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-7",
      question: "In React",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-8",
      question: "What is React Concurrent Mode? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A set of features that help apps stay responsive",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
      ],
      explanation:
        "React Concurrent Mode is a set of features that help apps stay responsive and gracefully adjust to the users device capabilities. This is a core React principle.",
      category: "React Advanced",
      difficulty: "hard",
      tags: ["react", "advanced", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-9",
      question: "What is the Flux architecture pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A unidirectional data flow pattern",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A bidirectional data flow pattern",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A random data flow pattern",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A circular data flow pattern",
          isCorrect: false,
        },
      ],
      explanation:
        "Flux is a unidirectional data flow pattern that complements Reacts composable view components. This is a core React principle.",
      category: "React Architecture",
      difficulty: "hard",
      tags: ["react", "architecture", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-10",
      question: "Which of the following describes Suspense for Data Fetching?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A way to handle async data loading",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A way to handle routing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A way to handle errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A way to handle styling",
          isCorrect: false,
        },
      ],
      explanation:
        "Suspense for Data Fetching allows components to suspend rendering while data is being fetched. This is a core React principle.",
      category: "React Suspense",
      difficulty: "hard",
      tags: ["react", "suspense", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-12",
      question: "What is React Fiber? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A reconciliation algorithm",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
      ],
      explanation:
        "React Fiber is the reconciliation algorithm that powers Reacts rendering. This is a core React principle.",
      category: "React Fiber",
      difficulty: "hard",
      tags: ["react", "fiber", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-13",
      question: "What is React DevTools Profiler used for?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-14",
      question: "Which of the following describes the Flux architecture pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A bidirectional data flow pattern",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A unidirectional data flow pattern",
          isCorrect: true,
        },
        {
          id: "c",
          text: "A circular data flow pattern",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A random data flow pattern",
          isCorrect: false,
        },
      ],
      explanation:
        "Flux is a unidirectional data flow pattern that complements Reacts composable view components. This is a core React principle.",
      category: "React Architecture",
      difficulty: "hard",
      tags: ["react", "architecture", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-16",
      question: "What is the Render Props pattern? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-17",
      question: "What is React Testing Librarys philosophy?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-18",
      question: "Which of the following describes React Concurrent Mode?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A set of features that help apps stay responsive",
          isCorrect: true,
        },
        {
          id: "d",
          text: "A build tool",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A testing framework",
          isCorrect: false,
        },
        {
          id: "b",
          text: "A state management library",
          isCorrect: false,
        },
      ],
      explanation:
        "React Concurrent Mode is a set of features that help apps stay responsive and gracefully adjust to the users device capabilities. This is a core React principle.",
      category: "React Advanced",
      difficulty: "hard",
      tags: ["react", "advanced", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-20",
      question: "What are React Server Components? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Components that run on the server",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Components that run everywhere",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Components that run nowhere",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Components that run on the client",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components run on the server and can access backend resources directly. This is a core React principle.",
      category: "React Server Components",
      difficulty: "hard",
      tags: ["react", "server-components", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-21",
      question: "What is code splitting in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Splitting state",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Splitting components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Splitting code into smaller chunks",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Splitting props",
          isCorrect: false,
        },
      ],
      explanation:
        "Code splitting allows you to split your code into smaller chunks that can be loaded on demand. This is a core React principle.",
      category: "React Optimization",
      difficulty: "hard",
      tags: ["react", "optimization", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-22",
      question: "Which of the following describes the Render Props pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-24",
      question: "What is React DevTools Profiler used for? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-25",
      question: "What are React Server Components?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Components that run everywhere",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Components that run on the server",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Components that run nowhere",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Components that run on the client",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components run on the server and can access backend resources directly. This is a core React principle.",
      category: "React Server Components",
      difficulty: "hard",
      tags: ["react", "server-components", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-26",
      question: "Which of the following describes React Testing Librarys philosophy?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is React Testing Librarys philosophy? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Test everything",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Test behavior, not implementation",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Test nothing",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Test implementation, not behavior",
          isCorrect: false,
        },
      ],
      explanation:
        "React Testing Library encourages testing user behavior rather than implementation details. This is a core React principle.",
      category: "React Testing",
      difficulty: "hard",
      tags: ["react", "testing", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-29",
      question: "What is the Render Props pattern?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Managing props",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling props",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Sharing code between components using a prop",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Rendering props",
          isCorrect: false,
        },
      ],
      explanation:
        "Render Props is a pattern for sharing code between components using a prop whose value is a function. This is a core React principle.",
      category: "React Patterns",
      difficulty: "hard",
      tags: ["react", "patterns", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes code splitting in React?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Splitting props",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Splitting state",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Splitting code into smaller chunks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Splitting components",
          isCorrect: false,
        },
      ],
      explanation:
        "Code splitting allows you to split your code into smaller chunks that can be loaded on demand. This is a core React principle.",
      category: "React Optimization",
      difficulty: "hard",
      tags: ["react", "optimization", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is Suspense for Data Fetching? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "A way to handle errors",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A way to handle styling",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A way to handle routing",
          isCorrect: false,
        },
        {
          id: "a",
          text: "A way to handle async data loading",
          isCorrect: true,
        },
      ],
      explanation:
        "Suspense for Data Fetching allows components to suspend rendering while data is being fetched. This is a core React principle.",
      category: "React Suspense",
      difficulty: "hard",
      tags: ["react", "suspense", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes React DevTools Profiler used for?",
      type: "multiple-choice",
      options: [
        {
          id: "c",
          text: "Testing components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Styling components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Analyzing component performance",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Debugging state",
          isCorrect: false,
        },
      ],
      explanation:
        "React DevTools Profiler helps identify performance bottlenecks in React applications. This is a core React principle.",
      category: "React Performance",
      difficulty: "hard",
      tags: ["react", "performance", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-28",
      question: "What is the purpose of React Aria? in React?",
      type: "multiple-choice",
      options: [
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-29",
      question: "What is the purpose of React Aria?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
    {
      id: "react-senior-30",
      question: "Which of the following describes the purpose of React Aria?",
      type: "multiple-choice",
      options: [
        {
          id: "d",
          text: "Styling accessible components",
          isCorrect: false,
        },
        {
          id: "a",
          text: "Building accessible components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Testing accessibility",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Auditing accessibility",
          isCorrect: false,
        },
      ],
      explanation:
        "React Aria provides hooks and utilities for building accessible React components. This is a core React principle.",
      category: "React Accessibility",
      difficulty: "hard",
      tags: ["react", "accessibility", "react", "senior"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const NEXTJS_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "nextjs-junior-1",
      question: "What is Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A React framework for production",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A JavaScript library",
          isCorrect: false,
        },
      ],
      explanation:
        "Next.js is a React framework that provides additional features like server-side rendering",
      category: "Next.js Basics",
      difficulty: "easy",
      tags: ["basics", "framework"],
      points: 1,
    },
    {
      id: "nextjs-junior-2",
      question: "What command is used to create a new Next.js project?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "npx create-next-app@latest",
          isCorrect: true,
        },
        {
          id: "b",
          text: "npm create next-app",
          isCorrect: false,
        },
        {
          id: "c",
          text: "yarn create nextjs",
          isCorrect: false,
        },
        {
          id: "d",
          text: "next new project",
          isCorrect: false,
        },
      ],
      explanation:
        "The official way to create a new Next.js project is using npx create-next-app@latest command.",
      category: "Setup",
      difficulty: "easy",
      tags: ["setup", "cli", "create"],
      points: 1,
    },
    {
      id: "nextjs-junior-3",
      question: "Which file is used to configure Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "next.config.js",
          isCorrect: true,
        },
        {
          id: "b",
          text: "config.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "next.js",
          isCorrect: false,
        },
        {
          id: "d",
          text: "app.config.js",
          isCorrect: false,
        },
      ],
      explanation: "Next.js uses next.config.js file for configuration settings.",
      category: "Configuration",
      difficulty: "easy",
      tags: ["config", "setup"],
      points: 1,
    },
    {
      id: "nextjs-junior-4",
      question: "What is the default port for Next.js development server?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "3000",
          isCorrect: true,
        },
        {
          id: "b",
          text: "8080",
          isCorrect: false,
        },
        {
          id: "c",
          text: "5000",
          isCorrect: false,
        },
        {
          id: "d",
          text: "4000",
          isCorrect: false,
        },
      ],
      explanation: "Next.js development server runs on port 3000 by default.",
      category: "Development",
      difficulty: "easy",
      tags: ["dev-server", "port"],
      points: 1,
    },
    {
      id: "nextjs-junior-5",
      question: "What is the purpose of the _app.js file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To customize the default App component",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To define API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To configure build settings",
          isCorrect: false,
        },
      ],
      explanation:
        "The _app.js file allows you to customize the default App component and add global styles.",
      category: "App Structure",
      difficulty: "easy",
      tags: ["app", "customization"],
      points: 1,
    },
    {
      id: "nextjs-junior-6",
      question: "What is the purpose of the _document.js file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To customize the HTML document structure",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To define page components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To manage state",
          isCorrect: false,
        },
      ],
      explanation:
        "The _document.js file allows you to customize the HTML document structure including <html>, <head>, and <body> tags.",
      category: "App Structure",
      difficulty: "easy",
      tags: ["document", "html", "structure"],
      points: 1,
    },
    {
      id: "nextjs-junior-7",
      question: "What is the purpose of the pages directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define routes and pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure the app",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The pages directory is used to define routes and pages in Next.js. Each file becomes a route.",
      category: "Routing",
      difficulty: "easy",
      tags: ["pages", "routing", "file-system"],
      points: 1,
    },
    {
      id: "nextjs-junior-8",
      question: "What is the purpose of the public directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store static assets",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The public directory stores static assets like images, icons, and other files that can be referenced directly.",
      category: "Static Assets",
      difficulty: "easy",
      tags: ["public", "static", "assets"],
      points: 1,
    },
    {
      id: "nextjs-junior-9",
      question: "What is the purpose of the styles directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store CSS files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store images",
          isCorrect: false,
        },
      ],
      explanation:
        "The styles directory is used to store CSS files and stylesheets for the application.",
      category: "Styling",
      difficulty: "easy",
      tags: ["styles", "css", "styling"],
      points: 1,
    },
    {
      id: "nextjs-junior-10",
      question: "What is the purpose of the components directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store reusable React components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store styles",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store images",
          isCorrect: false,
        },
      ],
      explanation:
        "The components directory is used to store reusable React components that can be imported and used across the application.",
      category: "Components",
      difficulty: "easy",
      tags: ["components", "reusable", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-11",
      question: "What is the purpose of the lib directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store utility functions and libraries",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The lib directory is used to store utility functions, helper functions, and third-party library configurations.",
      category: "Utilities",
      difficulty: "easy",
      tags: ["lib", "utilities", "helpers"],
      points: 1,
    },
    {
      id: "nextjs-junior-12",
      question: "What is the purpose of the hooks directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store custom React hooks",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The hooks directory is used to store custom React hooks that can be reused across components.",
      category: "Hooks",
      difficulty: "easy",
      tags: ["hooks", "custom", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-13",
      question: "What is the purpose of the utils directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store utility functions and helpers",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The utils directory is used to store utility functions, helper functions, and common logic that can be reused.",
      category: "Utilities",
      difficulty: "easy",
      tags: ["utils", "utilities", "helpers"],
      points: 1,
    },
    {
      id: "nextjs-junior-14",
      question: "What is the purpose of the types directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store TypeScript type definitions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The types directory is used to store TypeScript type definitions, interfaces, and type declarations.",
      category: "TypeScript",
      difficulty: "easy",
      tags: ["types", "typescript", "interfaces"],
      points: 1,
    },
    {
      id: "nextjs-junior-15",
      question: "What is the purpose of the constants directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store application constants and configuration values",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The constants directory is used to store application constants, configuration values, and static data.",
      category: "Constants",
      difficulty: "easy",
      tags: ["constants", "config", "static"],
      points: 1,
    },
    {
      id: "nextjs-junior-16",
      question: "What is the purpose of the context directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store React Context providers and consumers",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The context directory is used to store React Context providers and consumers for state management.",
      category: "State Management",
      difficulty: "easy",
      tags: ["context", "state", "react"],
      points: 1,
    },
    {
      id: "nextjs-junior-17",
      question: "What is the purpose of the services directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store service functions and API calls",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The services directory is used to store service functions, API calls, and external service integrations.",
      category: "Services",
      difficulty: "easy",
      tags: ["services", "api", "external"],
      points: 1,
    },
    {
      id: "nextjs-junior-18",
      question: "What is the purpose of the middleware directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store middleware functions",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The middleware directory is used to store middleware functions that run before requests are processed.",
      category: "Middleware",
      difficulty: "easy",
      tags: ["middleware", "requests", "processing"],
      points: 1,
    },
    {
      id: "nextjs-junior-19",
      question: "What is the purpose of the api directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define API routes and endpoints",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The api directory is used to define API routes and endpoints that can be accessed via HTTP requests.",
      category: "API Routes",
      difficulty: "easy",
      tags: ["api", "routes", "endpoints"],
      points: 1,
    },
    {
      id: "nextjs-junior-20",
      question: "What is the purpose of the data directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store data files and mock data",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The data directory is used to store data files, mock data, and static data for the application.",
      category: "Data",
      difficulty: "easy",
      tags: ["data", "mock", "static"],
      points: 1,
    },
    {
      id: "nextjs-junior-21",
      question: "What is the purpose of the store directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store state management logic",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The store directory is used to store state management logic, Redux stores, or other state management solutions.",
      category: "State Management",
      difficulty: "easy",
      tags: ["store", "state", "redux"],
      points: 1,
    },
    {
      id: "nextjs-junior-22",
      question: "What is the purpose of the config directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store configuration files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The config directory is used to store configuration files and settings for the application.",
      category: "Configuration",
      difficulty: "easy",
      tags: ["config", "settings", "configuration"],
      points: 1,
    },
    {
      id: "nextjs-junior-23",
      question: "What is the purpose of the tests directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store test files and testing utilities",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The tests directory is used to store test files, testing utilities, and test configurations.",
      category: "Testing",
      difficulty: "easy",
      tags: ["tests", "testing", "utilities"],
      points: 1,
    },
    {
      id: "nextjs-junior-24",
      question: "What is the purpose of the docs directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store documentation files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The docs directory is used to store documentation files, README files, and project documentation.",
      category: "Documentation",
      difficulty: "easy",
      tags: ["docs", "documentation", "readme"],
      points: 1,
    },
    {
      id: "nextjs-junior-25",
      question: "What is the purpose of the scripts directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store build and deployment scripts",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The scripts directory is used to store build scripts, deployment scripts, and automation scripts.",
      category: "Scripts",
      difficulty: "easy",
      tags: ["scripts", "build", "deployment"],
      points: 1,
    },
    {
      id: "nextjs-junior-26",
      question: "What is the purpose of the .next directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store build output and cache files",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The .next directory is used to store build output, cache files, and compiled assets.",
      category: "Build",
      difficulty: "easy",
      tags: ["next", "build", "cache"],
      points: 1,
    },
    {
      id: "nextjs-junior-27",
      question: "What is the purpose of the node_modules directory in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To store installed npm packages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The node_modules directory stores all installed npm packages and their dependencies.",
      category: "Dependencies",
      difficulty: "easy",
      tags: ["node_modules", "packages", "dependencies"],
      points: 1,
    },
    {
      id: "nextjs-junior-28",
      question: "What is the purpose of the package.json file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define project metadata and dependencies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The package.json file defines project metadata, dependencies, scripts, and configuration.",
      category: "Project Configuration",
      difficulty: "easy",
      tags: ["package.json", "metadata", "dependencies"],
      points: 1,
    },
    {
      id: "nextjs-junior-29",
      question: "What is the purpose of the package-lock.json file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To lock dependency versions for consistent installs",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The package-lock.json file locks dependency versions to ensure consistent installs across environments.",
      category: "Dependencies",
      difficulty: "easy",
      tags: ["package-lock", "versions", "consistency"],
      points: 1,
    },
    {
      id: "nextjs-junior-30",
      question: "What is the purpose of the .gitignore file in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To specify files and directories to ignore in Git",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To store components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To store pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The .gitignore file specifies files and directories that Git should ignore and not track.",
      category: "Version Control",
      difficulty: "easy",
      tags: ["gitignore", "git", "ignore"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "nextjs-intermediate-1",
      question: "Which rendering methods does Next.js support? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Static Site Generation (SSG)",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Server-Side Rendering (SSR)",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Client-Side Rendering (CSR)",
          isCorrect: true,
        },
        {
          id: "d",
          text: "Incremental Static Regeneration (ISR)",
          isCorrect: true,
        },
      ],
      correctAnswers: ["a", "b", "c", "d"],
      explanation: "Next.js supports multiple rendering methods including SSG",
      category: "Rendering",
      difficulty: "medium",
      tags: ["rendering", "ssg", "ssr"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-2",
      question: "What is the difference between getStaticProps and getServerSideProps?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "getStaticProps runs at build time, getServerSideProps runs on each request",
          isCorrect: true,
        },
        {
          id: "b",
          text: "getStaticProps runs on each request, getServerSideProps runs at build time",
          isCorrect: false,
        },
        {
          id: "c",
          text: "They are the same thing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "getStaticProps is deprecated",
          isCorrect: false,
        },
      ],
      explanation:
        "getStaticProps pre-renders pages at build time, while getServerSideProps renders pages on each request.",
      category: "Data Fetching",
      difficulty: "medium",
      tags: ["data-fetching", "static", "server-side"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-3",
      question: "What is the purpose of getStaticPaths in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To define which paths will be pre-rendered at build time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To define API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To configure routing",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To define middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "getStaticPaths is used with getStaticProps to specify which dynamic routes should be pre-rendered at build time.",
      category: "Static Generation",
      difficulty: "medium",
      tags: ["static-paths", "pre-rendering", "dynamic-routes"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-4",
      question: "What is Incremental Static Regeneration (ISR) in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A feature that allows updating static pages after build time",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A feature for server-side rendering",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A feature for client-side rendering",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A feature for API routes",
          isCorrect: false,
        },
      ],
      explanation:
        "ISR allows you to update static pages after build time without rebuilding the entire site.",
      category: "Static Generation",
      difficulty: "medium",
      tags: ["isr", "static-regeneration", "updates"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-5",
      question: "How do you implement API routes in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By creating files in the pages/api directory",
          isCorrect: true,
        },
        {
          id: "b",
          text: "By creating files in the api directory",
          isCorrect: false,
        },
        {
          id: "c",
          text: "By creating files in the routes directory",
          isCorrect: false,
        },
        {
          id: "d",
          text: "By creating files in the server directory",
          isCorrect: false,
        },
      ],
      explanation: "API routes in Next.js are created by adding files to the pages/api directory.",
      category: "API Routes",
      difficulty: "medium",
      tags: ["api-routes", "pages", "api"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-6",
      question: "What is the purpose of the next/image component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To optimize images automatically with lazy loading and responsive sizing",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create image galleries",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To edit images",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store images",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/image component provides automatic image optimization, lazy loading, and responsive sizing.",
      category: "Performance",
      difficulty: "medium",
      tags: ["image-optimization", "performance", "lazy-loading"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-7",
      question: "What is the purpose of the next/link component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To enable client-side navigation between pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create external links",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create buttons",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create forms",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/link component enables client-side navigation between pages for better performance.",
      category: "Navigation",
      difficulty: "medium",
      tags: ["navigation", "client-side", "performance"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-8",
      question: "What is the purpose of the next/head component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To add elements to the document head",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create page headers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create navigation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create footers",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/head component allows you to add elements to the document head, such as title, meta tags, and scripts.",
      category: "SEO",
      difficulty: "medium",
      tags: ["head", "seo", "meta-tags"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-9",
      question: "What is the purpose of the next/router in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation programmatically",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create components",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/router provides access to router information and methods for programmatic navigation.",
      category: "Routing",
      difficulty: "medium",
      tags: ["router", "navigation", "programmatic"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-10",
      question: "What is the purpose of the next/dynamic component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To load components dynamically with code splitting",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create dynamic routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create dynamic imports",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create dynamic styles",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/dynamic component enables dynamic imports with code splitting for better performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["dynamic-imports", "code-splitting", "performance"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-11",
      question: "What is the purpose of the next/script component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To optimize third-party scripts with loading strategies",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create custom scripts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create inline scripts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create server scripts",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/script component optimizes third-party scripts with different loading strategies.",
      category: "Performance",
      difficulty: "medium",
      tags: ["scripts", "third-party", "optimization"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-12",
      question: "What is the purpose of the next/font component?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To optimize font loading and reduce layout shift",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create custom fonts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To edit fonts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To store fonts",
          isCorrect: false,
        },
      ],
      explanation:
        "The next/font component optimizes font loading and reduces layout shift for better performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["fonts", "optimization", "layout-shift"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-13",
      question: "What is the purpose of middleware in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To run code before a request is completed",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To create API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To create components",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To create pages",
          isCorrect: false,
        },
      ],
      explanation:
        "Middleware in Next.js runs code before a request is completed, allowing you to modify the response.",
      category: "Middleware",
      difficulty: "medium",
      tags: ["middleware", "requests", "processing"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-14",
      question: "What is the purpose of the App Router in Next.js 13+?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To provide a new routing system with layouts and nested routes",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "The App Router provides a new routing system with layouts, nested routes, and improved performance.",
      category: "Routing",
      difficulty: "medium",
      tags: ["app-router", "routing", "layouts"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-15",
      question: "What is the purpose of Server Components in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render components on the server for better performance",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Client Components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "Server Components render on the server, reducing the JavaScript bundle size and improving performance.",
      category: "Performance",
      difficulty: "medium",
      tags: ["server-components", "performance", "rendering"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-16",
      question: "What is the purpose of Client Components in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render components on the client with interactivity",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace Server Components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace API routes",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace middleware",
          isCorrect: false,
        },
      ],
      explanation:
        "Client Components render on the client and can use browser APIs and React hooks for interactivity.",
      category: "Components",
      difficulty: "medium",
      tags: ["client-components", "interactivity", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-17",
      question: "What is the purpose of layouts in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To share UI between multiple pages",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace components",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace API routes",
          isCorrect: false,
        },
      ],
      explanation:
        "Layouts allow you to share UI between multiple pages while preserving state and avoiding re-renders.",
      category: "Layouts",
      difficulty: "medium",
      tags: ["layouts", "ui", "sharing"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-18",
      question: "What is the purpose of loading.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show loading UI while a page is loading",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "loading.js files create loading UI that shows while a page is loading in the App Router.",
      category: "Loading",
      difficulty: "medium",
      tags: ["loading", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-19",
      question: "What is the purpose of error.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show error UI when something goes wrong",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "error.js files create error UI that shows when something goes wrong in the App Router.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["error-handling", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-20",
      question: "What is the purpose of not-found.js in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To show UI when a page is not found",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "not-found.js files create UI that shows when a page is not found in the App Router.",
      category: "Error Handling",
      difficulty: "medium",
      tags: ["not-found", "ui", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-21",
      question: "What is the purpose of route groups in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To organize routes without affecting the URL structure",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Route groups allow you to organize routes into logical groups without affecting the URL structure.",
      category: "Routing",
      difficulty: "medium",
      tags: ["route-groups", "organization", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-22",
      question: "What is the purpose of parallel routes in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To render multiple pages simultaneously in the same layout",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Parallel routes allow you to render multiple pages simultaneously in the same layout.",
      category: "Routing",
      difficulty: "medium",
      tags: ["parallel-routes", "simultaneous", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-23",
      question: "What is the purpose of intercepting routes in the App Router?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To intercept route navigation and show different UI",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace layouts",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace pages",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace components",
          isCorrect: false,
        },
      ],
      explanation:
        "Intercepting routes allow you to intercept route navigation and show different UI, like modals.",
      category: "Routing",
      difficulty: "medium",
      tags: ["intercepting-routes", "navigation", "app-router"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-24",
      question: "What is the purpose of the useSearchParams hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read and update URL search parameters",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useSearchParams allows you to read and update URL search parameters in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["search-params", "url", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-25",
      question: "What is the purpose of the usePathname hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read the current pathname",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation: "usePathname allows you to read the current pathname in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["pathname", "url", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-26",
      question: "What is the purpose of the useParams hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To read dynamic route parameters",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useRouter",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace usePathname",
          isCorrect: false,
        },
      ],
      explanation: "useParams allows you to read dynamic route parameters in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["params", "dynamic-routes", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-27",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-28",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-29",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
    {
      id: "nextjs-intermediate-30",
      question: "What is the purpose of the useRouter hook in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "To access router information and perform navigation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "To replace useSearchParams",
          isCorrect: false,
        },
        {
          id: "c",
          text: "To replace usePathname",
          isCorrect: false,
        },
        {
          id: "d",
          text: "To replace useParams",
          isCorrect: false,
        },
      ],
      explanation:
        "useRouter provides access to router information and methods for navigation in Next.js.",
      category: "Hooks",
      difficulty: "medium",
      tags: ["router", "navigation", "hooks"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "nextjs-senior-1",
      question: "How would you implement custom server middleware in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using middleware.ts file in the root directory",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using getServerSideProps",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using getStaticProps",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using API routes",
          isCorrect: false,
        },
      ],
      explanation:
        "Custom server middleware in Next.js is implemented using the middleware.ts file in the root directory.",
      category: "Middleware",
      difficulty: "hard",
      tags: ["middleware", "server", "advanced"],
      points: 3,
    },
    {
      id: "nextjs-senior-2",
      question: "How would you implement advanced caching strategies in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using ISR, SWR, and custom cache headers",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only ISR",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only SWR",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only cache headers",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced caching in Next.js involves ISR for static content, SWR for client-side caching, and custom cache headers for API responses.",
      category: "Performance",
      difficulty: "hard",
      tags: ["caching", "isr", "swr", "performance"],
      points: 3,
    },
    {
      id: "nextjs-senior-3",
      question: "How would you implement advanced error boundaries in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using error.js files, global error handlers, and custom error components",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only error.js files",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only global error handlers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only custom error components",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced error handling involves error.js files for page-level errors, global error handlers, and custom error boundary components.",
      category: "Error Handling",
      difficulty: "hard",
      tags: ["error-boundaries", "error-handling", "recovery"],
      points: 3,
    },
    {
      id: "nextjs-senior-4",
      question: "How would you implement advanced performance monitoring in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Web Vitals, custom metrics, and performance APIs",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Web Vitals",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only custom metrics",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only performance APIs",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced performance monitoring involves Web Vitals for Core Web Vitals, custom metrics for business KPIs, and Performance APIs for detailed analysis.",
      category: "Monitoring",
      difficulty: "hard",
      tags: ["performance", "web-vitals", "monitoring", "metrics"],
      points: 3,
    },
    {
      id: "nextjs-senior-5",
      question: "How would you implement advanced security measures in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using CSP headers, authentication middleware, and input validation",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only CSP headers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only authentication middleware",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only input validation",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced security involves Content Security Policy headers, authentication middleware, and comprehensive input validation.",
      category: "Security",
      difficulty: "hard",
      tags: ["security", "csp", "authentication", "validation"],
      points: 3,
    },
    {
      id: "nextjs-senior-6",
      question: "How would you implement advanced state management in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Zustand, Redux Toolkit, and React Query",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Zustand",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Redux Toolkit",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only React Query",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced state management in Next.js involves Zustand for client state, Redux Toolkit for complex state, and React Query for server state.",
      category: "State Management",
      difficulty: "hard",
      tags: ["state-management", "zustand", "redux", "react-query"],
      points: 3,
    },
    {
      id: "nextjs-senior-7",
      question: "How would you implement advanced testing strategies in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Jest, React Testing Library, and Playwright",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Jest",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only React Testing Library",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only Playwright",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced testing involves Jest for unit tests, React Testing Library for component tests, and Playwright for end-to-end tests.",
      category: "Testing",
      difficulty: "hard",
      tags: ["testing", "jest", "rtl", "playwright"],
      points: 3,
    },
    {
      id: "nextjs-senior-8",
      question: "How would you implement advanced deployment strategies in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Vercel, Docker, and CI/CD pipelines",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Vercel",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Docker",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only CI/CD pipelines",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced deployment involves Vercel for optimized hosting, Docker for containerization, and CI/CD pipelines for automated deployment.",
      category: "Deployment",
      difficulty: "hard",
      tags: ["deployment", "vercel", "docker", "ci-cd"],
      points: 3,
    },
    {
      id: "nextjs-senior-9",
      question: "How would you implement advanced SEO optimization in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using structured data, sitemaps, and meta tags optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only structured data",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only sitemaps",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only meta tags",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced SEO involves structured data for rich snippets, sitemaps for crawling, and optimized meta tags for better search visibility.",
      category: "SEO",
      difficulty: "hard",
      tags: ["seo", "structured-data", "sitemaps", "meta-tags"],
      points: 3,
    },
    {
      id: "nextjs-senior-10",
      question: "How would you implement advanced accessibility features in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using ARIA attributes, keyboard navigation, and screen reader support",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only ARIA attributes",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only keyboard navigation",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only screen reader support",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced accessibility involves proper ARIA attributes, keyboard navigation support, and screen reader compatibility.",
      category: "Accessibility",
      difficulty: "hard",
      tags: ["accessibility", "aria", "keyboard", "screen-readers"],
      points: 3,
    },
    {
      id: "nextjs-senior-11",
      question: "How would you implement advanced internationalization in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using next-i18next, dynamic locale loading, and pluralization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only next-i18next",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only dynamic locale loading",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only pluralization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced i18n involves next-i18next for translations, dynamic locale loading for performance, and pluralization for proper grammar.",
      category: "Internationalization",
      difficulty: "hard",
      tags: ["i18n", "next-i18next", "locales", "pluralization"],
      points: 3,
    },
    {
      id: "nextjs-senior-12",
      question: "How would you implement advanced API optimization in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using request caching, response compression, and rate limiting",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only request caching",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only response compression",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only rate limiting",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced API optimization involves request caching for performance, response compression for bandwidth, and rate limiting for security.",
      category: "API Optimization",
      difficulty: "hard",
      tags: ["api", "caching", "compression", "rate-limiting"],
      points: 3,
    },
    {
      id: "nextjs-senior-13",
      question: "How would you implement advanced bundle optimization in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using code splitting, tree shaking, and bundle analysis",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only code splitting",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only tree shaking",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only bundle analysis",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced bundle optimization involves code splitting for lazy loading, tree shaking for removing unused code, and bundle analysis for optimization.",
      category: "Bundle Optimization",
      difficulty: "hard",
      tags: ["bundle", "code-splitting", "tree-shaking", "analysis"],
      points: 3,
    },
    {
      id: "nextjs-senior-14",
      question: "How would you implement advanced database integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Prisma, connection pooling, and query optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Prisma",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only connection pooling",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only query optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced database integration involves Prisma for type-safe queries, connection pooling for performance, and query optimization for efficiency.",
      category: "Database",
      difficulty: "hard",
      tags: ["database", "prisma", "connection-pooling", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-15",
      question: "How would you implement advanced authentication in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using NextAuth.js, JWT tokens, and session management",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only NextAuth.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only JWT tokens",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only session management",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced authentication involves NextAuth.js for OAuth providers, JWT tokens for stateless auth, and proper session management.",
      category: "Authentication",
      difficulty: "hard",
      tags: ["authentication", "nextauth", "jwt", "sessions"],
      points: 3,
    },
    {
      id: "nextjs-senior-16",
      question: "How would you implement advanced real-time features in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Socket.io, Server-Sent Events, and WebSocket connections",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Socket.io",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Server-Sent Events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only WebSocket connections",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced real-time features involve Socket.io for bidirectional communication, Server-Sent Events for one-way updates, and WebSocket for low-latency connections.",
      category: "Real-time",
      difficulty: "hard",
      tags: ["real-time", "socket.io", "sse", "websockets"],
      points: 3,
    },
    {
      id: "nextjs-senior-17",
      question: "How would you implement advanced analytics in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Google Analytics, custom events, and performance tracking",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Google Analytics",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only custom events",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only performance tracking",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced analytics involves Google Analytics for user behavior, custom events for business metrics, and performance tracking for optimization.",
      category: "Analytics",
      difficulty: "hard",
      tags: ["analytics", "google-analytics", "events", "performance"],
      points: 3,
    },
    {
      id: "nextjs-senior-18",
      question: "How would you implement advanced monitoring and logging in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Sentry, structured logging, and error tracking",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Sentry",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only structured logging",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only error tracking",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced monitoring involves Sentry for error tracking, structured logging for debugging, and comprehensive error tracking for reliability.",
      category: "Monitoring",
      difficulty: "hard",
      tags: ["monitoring", "sentry", "logging", "error-tracking"],
      points: 3,
    },
    {
      id: "nextjs-senior-19",
      question: "How would you implement advanced microservices architecture with Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using API Gateway, service discovery, and inter-service communication",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only API Gateway",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only service discovery",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only inter-service communication",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced microservices involve API Gateway for routing, service discovery for locating services, and efficient inter-service communication patterns.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["microservices", "api-gateway", "service-discovery", "communication"],
      points: 3,
    },
    {
      id: "nextjs-senior-20",
      question: "How would you implement advanced GraphQL integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Apollo Client, schema stitching, and query optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Apollo Client",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only schema stitching",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only query optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced GraphQL integration involves Apollo Client for caching, schema stitching for federation, and query optimization for performance.",
      category: "GraphQL",
      difficulty: "hard",
      tags: ["graphql", "apollo", "schema-stitching", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-21",
      question: "How would you implement advanced WebAssembly integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using WASM modules, Web Workers, and performance optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only WASM modules",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Web Workers",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only performance optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced WebAssembly integration involves WASM modules for high-performance code, Web Workers for background processing, and optimization for better performance.",
      category: "WebAssembly",
      difficulty: "hard",
      tags: ["wasm", "web-workers", "performance", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-22",
      question: "How would you implement advanced edge computing with Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Edge Functions, CDN optimization, and geographic distribution",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Edge Functions",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only CDN optimization",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only geographic distribution",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced edge computing involves Edge Functions for serverless computing, CDN optimization for content delivery, and geographic distribution for global performance.",
      category: "Edge Computing",
      difficulty: "hard",
      tags: ["edge", "cdn", "geographic", "distribution"],
      points: 3,
    },
    {
      id: "nextjs-senior-23",
      question: "How would you implement advanced progressive web app features in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using service workers, offline support, and app-like experience",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only service workers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only offline support",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only app-like experience",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced PWA features involve service workers for caching, offline support for reliability, and app-like experience for better user engagement.",
      category: "PWA",
      difficulty: "hard",
      tags: ["pwa", "service-workers", "offline", "app-like"],
      points: 3,
    },
    {
      id: "nextjs-senior-24",
      question: "How would you implement advanced machine learning integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using TensorFlow.js, model optimization, and inference caching",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only TensorFlow.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only model optimization",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only inference caching",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced ML integration involves TensorFlow.js for client-side inference, model optimization for performance, and inference caching for efficiency.",
      category: "Machine Learning",
      difficulty: "hard",
      tags: ["ml", "tensorflow", "optimization", "inference"],
      points: 3,
    },
    {
      id: "nextjs-senior-25",
      question: "How would you implement advanced blockchain integration in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Web3.js, smart contracts, and wallet integration",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Web3.js",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only smart contracts",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only wallet integration",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced blockchain integration involves Web3.js for blockchain interaction, smart contracts for decentralized logic, and wallet integration for user connectivity.",
      category: "Blockchain",
      difficulty: "hard",
      tags: ["blockchain", "web3", "smart-contracts", "wallets"],
      points: 3,
    },
    {
      id: "nextjs-senior-26",
      question: "How would you implement advanced video streaming in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using HLS, adaptive bitrate streaming, and CDN optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only HLS",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only adaptive bitrate streaming",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only CDN optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced video streaming involves HLS for compatibility, adaptive bitrate streaming for quality, and CDN optimization for delivery.",
      category: "Video Streaming",
      difficulty: "hard",
      tags: ["video", "hls", "adaptive", "cdn"],
      points: 3,
    },
    {
      id: "nextjs-senior-27",
      question: "How would you implement advanced payment processing in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Stripe, webhook handling, and secure payment flows",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Stripe",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only webhook handling",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only secure payment flows",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced payment processing involves Stripe for payment processing, webhook handling for real-time updates, and secure payment flows for user safety.",
      category: "Payments",
      difficulty: "hard",
      tags: ["payments", "stripe", "webhooks", "security"],
      points: 3,
    },
    {
      id: "nextjs-senior-28",
      question: "How would you implement advanced email systems in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using SendGrid, template engines, and email analytics",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only SendGrid",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only template engines",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only email analytics",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced email systems involve SendGrid for delivery, template engines for dynamic content, and email analytics for tracking performance.",
      category: "Email",
      difficulty: "hard",
      tags: ["email", "sendgrid", "templates", "analytics"],
      points: 3,
    },
    {
      id: "nextjs-senior-29",
      question: "How would you implement advanced file storage in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using AWS S3, Cloudinary, and file optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only AWS S3",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Cloudinary",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only file optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced file storage involves AWS S3 for scalable storage, Cloudinary for image processing, and file optimization for performance.",
      category: "File Storage",
      difficulty: "hard",
      tags: ["storage", "s3", "cloudinary", "optimization"],
      points: 3,
    },
    {
      id: "nextjs-senior-30",
      question: "How would you implement advanced search functionality in Next.js?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Elasticsearch, Algolia, and search optimization",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only Elasticsearch",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only Algolia",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only search optimization",
          isCorrect: false,
        },
      ],
      explanation:
        "Advanced search involves Elasticsearch for complex queries, Algolia for instant search, and optimization for better performance and relevance.",
      category: "Search",
      difficulty: "hard",
      tags: ["search", "elasticsearch", "algolia", "optimization"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const REDUX_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "redux-junior-1",
      question: "What is Redux?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "A predictable state container for JavaScript apps",
          isCorrect: true,
        },
        {
          id: "b",
          text: "A CSS framework",
          isCorrect: false,
        },
        {
          id: "c",
          text: "A database management system",
          isCorrect: false,
        },
        {
          id: "d",
          text: "A JavaScript library",
          isCorrect: false,
        },
      ],
      explanation: "Redux is a predictable state container for JavaScript applications",
      category: "Redux Basics",
      difficulty: "easy",
      tags: ["basics", "state-management"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "redux-intermediate-1",
      question: "What are the three principles of Redux? (Select all that apply)",
      type: "multiple-checkbox",
      options: [
        {
          id: "a",
          text: "Single source of truth",
          isCorrect: true,
        },
        {
          id: "b",
          text: "State is read-only",
          isCorrect: true,
        },
        {
          id: "c",
          text: "Changes are made with pure functions",
          isCorrect: true,
        },
        {
          id: "d",
          text: "State is mutable",
          isCorrect: false,
        },
      ],
      correctAnswers: ["a", "b", "c"],
      explanation: "Redux follows three principles: single source of truth",
      category: "Redux Principles",
      difficulty: "medium",
      tags: ["principles", "architecture"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "redux-senior-1",
      question: "How would you implement Redux middleware for handling asynchronous actions?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "Using Redux Thunk or Redux Saga",
          isCorrect: true,
        },
        {
          id: "b",
          text: "Using only reducers",
          isCorrect: false,
        },
        {
          id: "c",
          text: "Using only actions",
          isCorrect: false,
        },
        {
          id: "d",
          text: "Using only selectors",
          isCorrect: false,
        },
      ],
      explanation:
        "Redux middleware like Redux Thunk or Redux Saga are used to handle asynchronous actions and side effects.",
      category: "Middleware",
      difficulty: "hard",
      tags: ["middleware", "async", "thunk", "saga"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const RANDOM_ENHANCED_QUESTIONS = {
  junior: [
    {
      id: "random-junior-1",
      question: "What is the purpose of version control systems?",
      type: "multiple-choice",
      options: [
        { id: "a", text: "To track changes in code over time", isCorrect: true },
        { id: "b", text: "To compile code", isCorrect: false },
        { id: "c", text: "To run tests", isCorrect: false },
        { id: "d", text: "To deploy applications", isCorrect: false },
      ],
      explanation:
        "Version control systems like Git help track changes in code over time and enable collaboration.",
      category: "Version Control",
      difficulty: "easy",
      tags: ["git", "version-control"],
      points: 1,
    },
  ] as InteractiveQuizQuestion[],

  intermediate: [
    {
      id: "random-intermediate-1",
      question: "What is the purpose of CI/CD pipelines?",
      type: "multiple-choice",
      options: [
        { id: "a", text: "To automate testing and deployment", isCorrect: true },
        { id: "b", text: "To write code", isCorrect: false },
        { id: "c", text: "To design user interfaces", isCorrect: false },
        { id: "d", text: "To manage databases", isCorrect: false },
      ],
      explanation:
        "CI/CD pipelines automate continuous integration and continuous deployment processes.",
      category: "DevOps",
      difficulty: "medium",
      tags: ["ci-cd", "automation"],
      points: 2,
    },
  ] as InteractiveQuizQuestion[],

  senior: [
    {
      id: "random-senior-1",
      question: "How would you implement a microservices architecture?",
      type: "multiple-choice",
      options: [
        {
          id: "a",
          text: "By breaking down applications into small, independent services",
          isCorrect: true,
        },
        { id: "b", text: "By using a single large application", isCorrect: false },
        { id: "c", text: "By using only frontend frameworks", isCorrect: false },
        { id: "d", text: "By using only databases", isCorrect: false },
      ],
      explanation:
        "Microservices architecture involves breaking down applications into small, independent services that communicate over networks.",
      category: "Architecture",
      difficulty: "hard",
      tags: ["microservices", "architecture"],
      points: 3,
    },
  ] as InteractiveQuizQuestion[],
};

export const ENHANCED_INTERACTIVE_QUIZ_DATA = {
  angular: ANGULAR_ENHANCED_QUESTIONS,
  react: REACT_ENHANCED_QUESTIONS,
  nextjs: NEXTJS_ENHANCED_QUESTIONS,
  redux: REDUX_ENHANCED_QUESTIONS,
  random: RANDOM_ENHANCED_QUESTIONS,
};
